
UART_PMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024ac  08004660  08004660  00005660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b0c  08006b0c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b0c  08006b0c  00007b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b14  08006b14  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b14  08006b14  00007b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b18  08006b18  00007b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006b1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  2000000c  08006b28  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08006b28  0000851c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee28  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a9  00000000  00000000  00016e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00019710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca1  00000000  00000000  0001a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017471  00000000  00000000  0001b419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd8  00000000  00000000  0003288a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f34f  00000000  00000000  00045462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d47b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a0  00000000  00000000  000d47f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d8c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004648 	.word	0x08004648

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004648 	.word	0x08004648

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	@ (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f94f 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f003 feda 	bl	80042d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f967 	bl	8000822 <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f92f 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	@ (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000008 	.word	0x20000008
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000028 	.word	0x20000028

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d005      	beq.n	80005f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <HAL_Delay+0x44>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	bf00      	nop
 80005f8:	f7ff ffde 	bl	80005b8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f7      	bhi.n	80005f8 <HAL_Delay+0x28>
  {
  }
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000004 	.word	0x20000004

08000618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	@ (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <__NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	2b00      	cmp	r3, #0
 800068c:	db0b      	blt.n	80006a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 021f 	and.w	r2, r3, #31
 8000694:	4907      	ldr	r1, [pc, #28]	@ (80006b4 <__NVIC_EnableIRQ+0x38>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	095b      	lsrs	r3, r3, #5
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	@ (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	@ (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	@ 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	@ 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff8e 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff29 	bl	8000618 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff3e 	bl	8000660 <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff8e 	bl	800070c <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff31 	bl	800067c <__NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffa2 	bl	8000774 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b02      	cmp	r3, #2
 800084c:	d004      	beq.n	8000858 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	e00c      	b.n	8000872 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2205      	movs	r2, #5
 800085c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 0201 	bic.w	r2, r2, #1
 800086e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	@ 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
 800089a:	e159      	b.n	8000b50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	f040 8148 	bne.w	8000b4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d00b      	beq.n	80008da <HAL_GPIO_Init+0x5a>
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d007      	beq.n	80008da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	2b11      	cmp	r3, #17
 80008d0:	d003      	beq.n	80008da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d130      	bne.n	800093c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	2203      	movs	r2, #3
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4013      	ands	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	68da      	ldr	r2, [r3, #12]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	4313      	orrs	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000910:	2201      	movs	r2, #1
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	f003 0201 	and.w	r2, r3, #1
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d003      	beq.n	800097c <HAL_GPIO_Init+0xfc>
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b12      	cmp	r3, #18
 800097a:	d123      	bne.n	80009c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	08da      	lsrs	r2, r3, #3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3208      	adds	r2, #8
 8000984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	220f      	movs	r2, #15
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	691a      	ldr	r2, [r3, #16]
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	08da      	lsrs	r2, r3, #3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3208      	adds	r2, #8
 80009be:	69b9      	ldr	r1, [r7, #24]
 80009c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2203      	movs	r2, #3
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0203 	and.w	r2, r3, #3
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f000 80a2 	beq.w	8000b4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b57      	ldr	r3, [pc, #348]	@ (8000b68 <HAL_GPIO_Init+0x2e8>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a56      	ldr	r2, [pc, #344]	@ (8000b68 <HAL_GPIO_Init+0x2e8>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a16:	4b54      	ldr	r3, [pc, #336]	@ (8000b68 <HAL_GPIO_Init+0x2e8>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a22:	4a52      	ldr	r2, [pc, #328]	@ (8000b6c <HAL_GPIO_Init+0x2ec>)
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	3302      	adds	r3, #2
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4013      	ands	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a49      	ldr	r2, [pc, #292]	@ (8000b70 <HAL_GPIO_Init+0x2f0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d019      	beq.n	8000a82 <HAL_GPIO_Init+0x202>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a48      	ldr	r2, [pc, #288]	@ (8000b74 <HAL_GPIO_Init+0x2f4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0x1fe>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a47      	ldr	r2, [pc, #284]	@ (8000b78 <HAL_GPIO_Init+0x2f8>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00d      	beq.n	8000a7a <HAL_GPIO_Init+0x1fa>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a46      	ldr	r2, [pc, #280]	@ (8000b7c <HAL_GPIO_Init+0x2fc>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d007      	beq.n	8000a76 <HAL_GPIO_Init+0x1f6>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a45      	ldr	r2, [pc, #276]	@ (8000b80 <HAL_GPIO_Init+0x300>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_GPIO_Init+0x1f2>
 8000a6e:	2304      	movs	r3, #4
 8000a70:	e008      	b.n	8000a84 <HAL_GPIO_Init+0x204>
 8000a72:	2307      	movs	r3, #7
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x204>
 8000a76:	2303      	movs	r3, #3
 8000a78:	e004      	b.n	8000a84 <HAL_GPIO_Init+0x204>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_Init+0x204>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x204>
 8000a82:	2300      	movs	r3, #0
 8000a84:	69fa      	ldr	r2, [r7, #28]
 8000a86:	f002 0203 	and.w	r2, r2, #3
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a94:	4935      	ldr	r1, [pc, #212]	@ (8000b6c <HAL_GPIO_Init+0x2ec>)
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa2:	4b38      	ldr	r3, [pc, #224]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000acc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000af0:	4a24      	ldr	r2, [pc, #144]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af6:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4013      	ands	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b44:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	f67f aea2 	bls.w	800089c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3724      	adds	r7, #36	@ 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	619a      	str	r2, [r3, #24]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e12b      	b.n	8000e26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d106      	bne.n	8000be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f002 fc50 	bl	8003488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2224      	movs	r2, #36	@ 0x24
 8000bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 0201 	bic.w	r2, r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c20:	f001 f84c 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8000c24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a81      	ldr	r2, [pc, #516]	@ (8000e30 <HAL_I2C_Init+0x274>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d807      	bhi.n	8000c40 <HAL_I2C_Init+0x84>
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4a80      	ldr	r2, [pc, #512]	@ (8000e34 <HAL_I2C_Init+0x278>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	bf94      	ite	ls
 8000c38:	2301      	movls	r3, #1
 8000c3a:	2300      	movhi	r3, #0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	e006      	b.n	8000c4e <HAL_I2C_Init+0x92>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4a7d      	ldr	r2, [pc, #500]	@ (8000e38 <HAL_I2C_Init+0x27c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	bf94      	ite	ls
 8000c48:	2301      	movls	r3, #1
 8000c4a:	2300      	movhi	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e0e7      	b.n	8000e26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4a78      	ldr	r2, [pc, #480]	@ (8000e3c <HAL_I2C_Init+0x280>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	0c9b      	lsrs	r3, r3, #18
 8000c60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6a1b      	ldr	r3, [r3, #32]
 8000c7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a6a      	ldr	r2, [pc, #424]	@ (8000e30 <HAL_I2C_Init+0x274>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d802      	bhi.n	8000c90 <HAL_I2C_Init+0xd4>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	e009      	b.n	8000ca4 <HAL_I2C_Init+0xe8>
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	4a69      	ldr	r2, [pc, #420]	@ (8000e40 <HAL_I2C_Init+0x284>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	099b      	lsrs	r3, r3, #6
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000cb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	495c      	ldr	r1, [pc, #368]	@ (8000e30 <HAL_I2C_Init+0x274>)
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d819      	bhi.n	8000cf8 <HAL_I2C_Init+0x13c>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1e59      	subs	r1, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cd2:	1c59      	adds	r1, r3, #1
 8000cd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000cd8:	400b      	ands	r3, r1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00a      	beq.n	8000cf4 <HAL_I2C_Init+0x138>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1e59      	subs	r1, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cec:	3301      	adds	r3, #1
 8000cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf2:	e051      	b.n	8000d98 <HAL_I2C_Init+0x1dc>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e04f      	b.n	8000d98 <HAL_I2C_Init+0x1dc>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d111      	bne.n	8000d24 <HAL_I2C_Init+0x168>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	1e58      	subs	r0, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	440b      	add	r3, r1
 8000d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d12:	3301      	adds	r3, #1
 8000d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf0c      	ite	eq
 8000d1c:	2301      	moveq	r3, #1
 8000d1e:	2300      	movne	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	e012      	b.n	8000d4a <HAL_I2C_Init+0x18e>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	1e58      	subs	r0, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6859      	ldr	r1, [r3, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	0099      	lsls	r1, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_I2C_Init+0x196>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e022      	b.n	8000d98 <HAL_I2C_Init+0x1dc>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10e      	bne.n	8000d78 <HAL_I2C_Init+0x1bc>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1e58      	subs	r0, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6859      	ldr	r1, [r3, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	440b      	add	r3, r1
 8000d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d76:	e00f      	b.n	8000d98 <HAL_I2C_Init+0x1dc>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	1e58      	subs	r0, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6859      	ldr	r1, [r3, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	0099      	lsls	r1, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	6809      	ldr	r1, [r1, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69da      	ldr	r2, [r3, #28]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000dc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6911      	ldr	r1, [r2, #16]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68d2      	ldr	r2, [r2, #12]
 8000dd2:	4311      	orrs	r1, r2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2220      	movs	r2, #32
 8000e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	000186a0 	.word	0x000186a0
 8000e34:	001e847f 	.word	0x001e847f
 8000e38:	003d08ff 	.word	0x003d08ff
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	10624dd3 	.word	0x10624dd3

08000e44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	817b      	strh	r3, [r7, #10]
 8000e56:	460b      	mov	r3, r1
 8000e58:	813b      	strh	r3, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e5e:	f7ff fbab 	bl	80005b8 <HAL_GetTick>
 8000e62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b20      	cmp	r3, #32
 8000e6e:	f040 80d9 	bne.w	8001024 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2319      	movs	r3, #25
 8000e78:	2201      	movs	r2, #1
 8000e7a:	496d      	ldr	r1, [pc, #436]	@ (8001030 <HAL_I2C_Mem_Write+0x1ec>)
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f000 f96f 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e0cc      	b.n	8001026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <HAL_I2C_Mem_Write+0x56>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e0c5      	b.n	8001026 <HAL_I2C_Mem_Write+0x1e2>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d007      	beq.n	8000ec0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2221      	movs	r2, #33	@ 0x21
 8000ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2240      	movs	r2, #64	@ 0x40
 8000edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6a3a      	ldr	r2, [r7, #32]
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4a4d      	ldr	r2, [pc, #308]	@ (8001034 <HAL_I2C_Mem_Write+0x1f0>)
 8000f00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f02:	88f8      	ldrh	r0, [r7, #6]
 8000f04:	893a      	ldrh	r2, [r7, #8]
 8000f06:	8979      	ldrh	r1, [r7, #10]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4603      	mov	r3, r0
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f000 f890 	bl	8001038 <I2C_RequestMemoryWrite>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d052      	beq.n	8000fc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e081      	b.n	8001026 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 f9f0 	bl	800130c <I2C_WaitOnTXEFlagUntilTimeout>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00d      	beq.n	8000f4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d107      	bne.n	8000f4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e06b      	b.n	8001026 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d11b      	bne.n	8000fc4 <HAL_I2C_Mem_Write+0x180>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d017      	beq.n	8000fc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1aa      	bne.n	8000f22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f9dc 	bl	800138e <I2C_WaitOnBTFFlagUntilTimeout>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00d      	beq.n	8000ff8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d107      	bne.n	8000ff4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ff2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e016      	b.n	8001026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2220      	movs	r2, #32
 800100c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001024:	2302      	movs	r3, #2
  }
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	00100002 	.word	0x00100002
 8001034:	ffff0000 	.word	0xffff0000

08001038 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4603      	mov	r3, r0
 8001048:	817b      	strh	r3, [r7, #10]
 800104a:	460b      	mov	r3, r1
 800104c:	813b      	strh	r3, [r7, #8]
 800104e:	4613      	mov	r3, r2
 8001050:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	2200      	movs	r2, #0
 800106a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f876 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00c      	beq.n	8001094 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800108e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e05f      	b.n	8001154 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001094:	897b      	ldrh	r3, [r7, #10]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80010a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	492c      	ldr	r1, [pc, #176]	@ (800115c <I2C_RequestMemoryWrite+0x124>)
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 f8af 	bl	800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e04c      	b.n	8001154 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d2:	6a39      	ldr	r1, [r7, #32]
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f919 	bl	800130c <I2C_WaitOnTXEFlagUntilTimeout>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d107      	bne.n	80010f8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e02b      	b.n	8001154 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d105      	bne.n	800110e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001102:	893b      	ldrh	r3, [r7, #8]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	e021      	b.n	8001152 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800110e:	893b      	ldrh	r3, [r7, #8]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800111c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800111e:	6a39      	ldr	r1, [r7, #32]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 f8f3 	bl	800130c <I2C_WaitOnTXEFlagUntilTimeout>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00d      	beq.n	8001148 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	2b04      	cmp	r3, #4
 8001132:	d107      	bne.n	8001144 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001142:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e005      	b.n	8001154 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	00010002 	.word	0x00010002

08001160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001170:	e025      	b.n	80011be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d021      	beq.n	80011be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800117a:	f7ff fa1d 	bl	80005b8 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d302      	bcc.n	8001190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d116      	bne.n	80011be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f043 0220 	orr.w	r2, r3, #32
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e023      	b.n	8001206 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	0c1b      	lsrs	r3, r3, #16
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d10d      	bne.n	80011e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4013      	ands	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	e00c      	b.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4013      	ands	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf0c      	ite	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	2300      	movne	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	429a      	cmp	r2, r3
 8001202:	d0b6      	beq.n	8001172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800121c:	e051      	b.n	80012c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122c:	d123      	bne.n	8001276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800123c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001246:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f043 0204 	orr.w	r2, r3, #4
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e046      	b.n	8001304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d021      	beq.n	80012c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127e:	f7ff f99b 	bl	80005b8 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d302      	bcc.n	8001294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d116      	bne.n	80012c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2220      	movs	r2, #32
 800129e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f043 0220 	orr.w	r2, r3, #32
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e020      	b.n	8001304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	0c1b      	lsrs	r3, r3, #16
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10c      	bne.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4013      	ands	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	e00b      	b.n	80012fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	43da      	mvns	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4013      	ands	r3, r2
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d18d      	bne.n	800121e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001318:	e02d      	b.n	8001376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f878 	bl	8001410 <I2C_IsAcknowledgeFailed>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e02d      	b.n	8001386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d021      	beq.n	8001376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001332:	f7ff f941 	bl	80005b8 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	429a      	cmp	r2, r3
 8001340:	d302      	bcc.n	8001348 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d116      	bne.n	8001376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f043 0220 	orr.w	r2, r3, #32
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e007      	b.n	8001386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001380:	2b80      	cmp	r3, #128	@ 0x80
 8001382:	d1ca      	bne.n	800131a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800139a:	e02d      	b.n	80013f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 f837 	bl	8001410 <I2C_IsAcknowledgeFailed>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e02d      	b.n	8001408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b2:	d021      	beq.n	80013f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b4:	f7ff f900 	bl	80005b8 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d302      	bcc.n	80013ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2220      	movs	r2, #32
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e007      	b.n	8001408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b04      	cmp	r3, #4
 8001404:	d1ca      	bne.n	800139c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001426:	d11b      	bne.n	8001460 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001430:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f043 0204 	orr.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e25e      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b82      	ldr	r3, [pc, #520]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e239      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4b76      	ldr	r3, [pc, #472]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b70      	ldr	r3, [pc, #448]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6f      	ldr	r2, [pc, #444]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6d      	ldr	r3, [pc, #436]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6c      	ldr	r2, [pc, #432]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4b69      	ldr	r3, [pc, #420]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a65      	ldr	r2, [pc, #404]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff f846 	bl	80005b8 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff f842 	bl	80005b8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	@ 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1fe      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff f832 	bl	80005b8 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff f82e 	bl	80005b8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1ea      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b51      	ldr	r3, [pc, #324]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	4b4a      	ldr	r3, [pc, #296]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b47      	ldr	r3, [pc, #284]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b41      	ldr	r3, [pc, #260]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1be      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4937      	ldr	r1, [pc, #220]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x244>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7fe ffe7 	bl	80005b8 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7fe ffe3 	bl	80005b8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e19f      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4925      	ldr	r1, [pc, #148]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_RCC_OscConfig+0x244>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7fe ffc6 	bl	80005b8 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7fe ffc2 	bl	80005b8 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e17e      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d036      	beq.n	80016c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7fe ffa6 	bl	80005b8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7fe ffa2 	bl	80005b8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e15e      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7fe ff8f 	bl	80005b8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7fe ff8b 	bl	80005b8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e147      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8097 	beq.w	8001804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b81      	ldr	r3, [pc, #516]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b7d      	ldr	r3, [pc, #500]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a7c      	ldr	r2, [pc, #496]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b7a      	ldr	r3, [pc, #488]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b77      	ldr	r3, [pc, #476]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d118      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b74      	ldr	r3, [pc, #464]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a73      	ldr	r2, [pc, #460]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7fe ff4b 	bl	80005b8 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7fe ff47 	bl	80005b8 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e103      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 800174c:	4b64      	ldr	r3, [pc, #400]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001750:	4a63      	ldr	r2, [pc, #396]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	@ 0x70
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x30c>
 8001762:	4b5f      	ldr	r3, [pc, #380]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	4a5e      	ldr	r2, [pc, #376]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	@ 0x70
 800176e:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	4a5b      	ldr	r2, [pc, #364]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a57      	ldr	r2, [pc, #348]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
 8001788:	4b55      	ldr	r3, [pc, #340]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7fe ff0c 	bl	80005b8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7fe ff08 	bl	80005b8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0c2      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ee      	beq.n	80017a4 <HAL_RCC_OscConfig+0x334>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7fe fef6 	bl	80005b8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7fe fef2 	bl	80005b8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0ac      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a38      	ldr	r2, [pc, #224]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8098 	beq.w	800193e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d05c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d141      	bne.n	80018a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7fe fec6 	bl	80005b8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7fe fec2 	bl	80005b8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e07e      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	491b      	ldr	r1, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7fe fe9b 	bl	80005b8 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7fe fe97 	bl	80005b8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e053      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x416>
 80018a4:	e04b      	b.n	800193e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7fe fe84 	bl	80005b8 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7fe fe80 	bl	80005b8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e03c      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
 80018d2:	e034      	b.n	800193e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e02f      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <HAL_RCC_OscConfig+0x4d8>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d11c      	bne.n	800193a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d115      	bne.n	800193a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800191a:	4293      	cmp	r3, r2
 800191c:	d10d      	bne.n	800193a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d90c      	bls.n	8001988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b65      	ldr	r3, [pc, #404]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e067      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4934      	ldr	r1, [pc, #208]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7fe fdbc 	bl	80005b8 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7fe fdb8 	bl	80005b8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20c      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd1c 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08006af4 	.word	0x08006af4
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b1c:	b090      	sub	sp, #64	@ 0x40
 8001b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b24:	2300      	movs	r3, #0
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b30:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d00d      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	f200 80a1 	bhi.w	8001c84 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x34>
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4a:	e09b      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001b50:	e09b      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b52:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b56:	e098      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b58:	4b4f      	ldr	r3, [pc, #316]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b60:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b62:	4b4d      	ldr	r3, [pc, #308]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d028      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	099b      	lsrs	r3, r3, #6
 8001b74:	2200      	movs	r2, #0
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b80:	2100      	movs	r1, #0
 8001b82:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b84:	fb03 f201 	mul.w	r2, r3, r1
 8001b88:	2300      	movs	r3, #0
 8001b8a:	fb00 f303 	mul.w	r3, r0, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a43      	ldr	r2, [pc, #268]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b92:	fba0 1202 	umull	r1, r2, r0, r2
 8001b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b98:	460a      	mov	r2, r1
 8001b9a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b9e:	4413      	add	r3, r2
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	61fa      	str	r2, [r7, #28]
 8001baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bb2:	f7fe fb23 	bl	80001fc <__aeabi_uldivmod>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4613      	mov	r3, r2
 8001bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bbe:	e053      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc0:	4b35      	ldr	r3, [pc, #212]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	617a      	str	r2, [r7, #20]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bd2:	f04f 0b00 	mov.w	fp, #0
 8001bd6:	4652      	mov	r2, sl
 8001bd8:	465b      	mov	r3, fp
 8001bda:	f04f 0000 	mov.w	r0, #0
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	0159      	lsls	r1, r3, #5
 8001be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be8:	0150      	lsls	r0, r2, #5
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	ebb2 080a 	subs.w	r8, r2, sl
 8001bf2:	eb63 090b 	sbc.w	r9, r3, fp
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c0a:	ebb2 0408 	subs.w	r4, r2, r8
 8001c0e:	eb63 0509 	sbc.w	r5, r3, r9
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	00eb      	lsls	r3, r5, #3
 8001c1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c20:	00e2      	lsls	r2, r4, #3
 8001c22:	4614      	mov	r4, r2
 8001c24:	461d      	mov	r5, r3
 8001c26:	eb14 030a 	adds.w	r3, r4, sl
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	eb45 030b 	adc.w	r3, r5, fp
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3e:	4629      	mov	r1, r5
 8001c40:	028b      	lsls	r3, r1, #10
 8001c42:	4621      	mov	r1, r4
 8001c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c48:	4621      	mov	r1, r4
 8001c4a:	028a      	lsls	r2, r1, #10
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c52:	2200      	movs	r2, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	60fa      	str	r2, [r7, #12]
 8001c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c5c:	f7fe face 	bl	80001fc <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	3301      	adds	r3, #1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001c78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3740      	adds	r7, #64	@ 0x40
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	017d7840 	.word	0x017d7840

08001ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0a9b      	lsrs	r3, r3, #10
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08006b04 	.word	0x08006b04

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ce8:	f7ff ffdc 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	@ (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08006b04 	.word	0x08006b04

08001d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e01d      	b.n	8001d5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f002 fb98 	bl	8004468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f000 f8ce 	bl	8001eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_ConfigClockSource+0x18>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0b3      	b.n	8001ee2 <HAL_TIM_ConfigClockSource+0x180>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d98:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001da0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db2:	d03e      	beq.n	8001e32 <HAL_TIM_ConfigClockSource+0xd0>
 8001db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db8:	f200 8087 	bhi.w	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dc0:	f000 8085 	beq.w	8001ece <HAL_TIM_ConfigClockSource+0x16c>
 8001dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dc8:	d87f      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001dca:	2b70      	cmp	r3, #112	@ 0x70
 8001dcc:	d01a      	beq.n	8001e04 <HAL_TIM_ConfigClockSource+0xa2>
 8001dce:	2b70      	cmp	r3, #112	@ 0x70
 8001dd0:	d87b      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001dd2:	2b60      	cmp	r3, #96	@ 0x60
 8001dd4:	d050      	beq.n	8001e78 <HAL_TIM_ConfigClockSource+0x116>
 8001dd6:	2b60      	cmp	r3, #96	@ 0x60
 8001dd8:	d877      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001dda:	2b50      	cmp	r3, #80	@ 0x50
 8001ddc:	d03c      	beq.n	8001e58 <HAL_TIM_ConfigClockSource+0xf6>
 8001dde:	2b50      	cmp	r3, #80	@ 0x50
 8001de0:	d873      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001de2:	2b40      	cmp	r3, #64	@ 0x40
 8001de4:	d058      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0x136>
 8001de6:	2b40      	cmp	r3, #64	@ 0x40
 8001de8:	d86f      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001dea:	2b30      	cmp	r3, #48	@ 0x30
 8001dec:	d064      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x156>
 8001dee:	2b30      	cmp	r3, #48	@ 0x30
 8001df0:	d86b      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d060      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x156>
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d867      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d05c      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x156>
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d05a      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001e02:	e062      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6899      	ldr	r1, [r3, #8]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f000 f964 	bl	80020e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	609a      	str	r2, [r3, #8]
      break;
 8001e30:	e04e      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f000 f94d 	bl	80020e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e54:	609a      	str	r2, [r3, #8]
      break;
 8001e56:	e03b      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f000 f8c1 	bl	8001fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2150      	movs	r1, #80	@ 0x50
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f91a 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001e76:	e02b      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f000 f8e0 	bl	800204a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2160      	movs	r1, #96	@ 0x60
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f90a 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001e96:	e01b      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f000 f8a1 	bl	8001fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2140      	movs	r1, #64	@ 0x40
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f8fa 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001eb6:	e00b      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 f8f1 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001ec8:	e002      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001eca:	bf00      	nop
 8001ecc:	e000      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a34      	ldr	r2, [pc, #208]	@ (8001fd0 <TIM_Base_SetConfig+0xe4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00f      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0a:	d00b      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a31      	ldr	r2, [pc, #196]	@ (8001fd4 <TIM_Base_SetConfig+0xe8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a30      	ldr	r2, [pc, #192]	@ (8001fd8 <TIM_Base_SetConfig+0xec>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001fdc <TIM_Base_SetConfig+0xf0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a25      	ldr	r2, [pc, #148]	@ (8001fd0 <TIM_Base_SetConfig+0xe4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01b      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f44:	d017      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a22      	ldr	r2, [pc, #136]	@ (8001fd4 <TIM_Base_SetConfig+0xe8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <TIM_Base_SetConfig+0xec>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00f      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a20      	ldr	r2, [pc, #128]	@ (8001fdc <TIM_Base_SetConfig+0xf0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00b      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe0 <TIM_Base_SetConfig+0xf4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <TIM_Base_SetConfig+0xf8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d003      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe8 <TIM_Base_SetConfig+0xfc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d108      	bne.n	8001f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a08      	ldr	r2, [pc, #32]	@ (8001fd0 <TIM_Base_SetConfig+0xe4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d103      	bne.n	8001fbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00
 8001fe0:	40014000 	.word	0x40014000
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	40014800 	.word	0x40014800

08001fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f023 0201 	bic.w	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f023 030a 	bic.w	r3, r3, #10
 8002028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	621a      	str	r2, [r3, #32]
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	f023 0210 	bic.w	r2, r3, #16
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	031b      	lsls	r3, r3, #12
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	621a      	str	r2, [r3, #32]
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f043 0307 	orr.w	r3, r3, #7
 80020cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	609a      	str	r2, [r3, #8]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	021a      	lsls	r2, r3, #8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	431a      	orrs	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	609a      	str	r2, [r3, #8]
}
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002134:	2302      	movs	r3, #2
 8002136:	e050      	b.n	80021da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800215e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d018      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d013      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00e      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a15      	ldr	r2, [pc, #84]	@ (80021f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a13      	ldr	r2, [pc, #76]	@ (80021f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10c      	bne.n	80021c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40014000 	.word	0x40014000

080021fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e03f      	b.n	800228e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f002 f96a 	bl	80044fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	@ 0x24
 800222c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800223e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fb97 	bl	8002974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b088      	sub	sp, #32
 800229a:	af02      	add	r7, sp, #8
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	f040 8083 	bne.w	80023be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_UART_Transmit+0x2e>
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e07b      	b.n	80023c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Transmit+0x40>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e074      	b.n	80023c0 <HAL_UART_Transmit+0x12a>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2221      	movs	r2, #33	@ 0x21
 80022e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022ec:	f7fe f964 	bl	80005b8 <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8002306:	e042      	b.n	800238e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800231e:	d122      	bne.n	8002366 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2200      	movs	r2, #0
 8002328:	2180      	movs	r1, #128	@ 0x80
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f9b6 	bl	800269c <UART_WaitOnFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e042      	b.n	80023c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800234c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3302      	adds	r3, #2
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	e017      	b.n	800238e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3301      	adds	r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	e013      	b.n	800238e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	2180      	movs	r1, #128	@ 0x80
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f993 	bl	800269c <UART_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e01f      	b.n	80023c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1b7      	bne.n	8002308 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2200      	movs	r2, #0
 80023a0:	2140      	movs	r1, #64	@ 0x40
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f97a 	bl	800269c <UART_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e006      	b.n	80023c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d140      	bne.n	8002464 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_UART_Receive_IT+0x26>
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e039      	b.n	8002466 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_UART_Receive_IT+0x38>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e032      	b.n	8002466 <HAL_UART_Receive_IT+0x9e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2222      	movs	r2, #34	@ 0x22
 8002424:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800243e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_UART_IRQHandler+0x52>
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f9d6 	bl	8002870 <UART_Receive_IT>
      return;
 80024c4:	e0d0      	b.n	8002668 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80b0 	beq.w	800262e <HAL_UART_IRQHandler+0x1ba>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_UART_IRQHandler+0x70>
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80a5 	beq.w	800262e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_UART_IRQHandler+0x90>
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_UART_IRQHandler+0xb0>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	f043 0202 	orr.w	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_UART_IRQHandler+0xd0>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00f      	beq.n	800256e <HAL_UART_IRQHandler+0xfa>
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d104      	bne.n	8002562 <HAL_UART_IRQHandler+0xee>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002566:	f043 0208 	orr.w	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d077      	beq.n	8002666 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_UART_IRQHandler+0x11c>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f970 	bl	8002870 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259a:	2b40      	cmp	r3, #64	@ 0x40
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d102      	bne.n	80025b8 <HAL_UART_IRQHandler+0x144>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d031      	beq.n	800261c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8b9 	bl	8002730 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b40      	cmp	r3, #64	@ 0x40
 80025ca:	d123      	bne.n	8002614 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e8:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <HAL_UART_IRQHandler+0x1fc>)
 80025ea:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe f922 	bl	800083a <HAL_DMA_Abort_IT>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260a:	e00e      	b.n	800262a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f83b 	bl	8002688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002612:	e00a      	b.n	800262a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f837 	bl	8002688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261a:	e006      	b.n	800262a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f833 	bl	8002688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8002628:	e01d      	b.n	8002666 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262a:	bf00      	nop
    return;
 800262c:	e01b      	b.n	8002666 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_UART_IRQHandler+0x1d6>
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8a6 	bl	8002794 <UART_Transmit_IT>
    return;
 8002648:	e00e      	b.n	8002668 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_UART_IRQHandler+0x1f4>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8ee 	bl	8002840 <UART_EndTransmit_IT>
    return;
 8002664:	e000      	b.n	8002668 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002666:	bf00      	nop
  }
}
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	0800276d 	.word	0x0800276d

08002674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ac:	e02c      	b.n	8002708 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d028      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <UART_WaitOnFlagUntilTimeout+0x30>
 80026bc:	f7fd ff7c 	bl	80005b8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d21d      	bcs.n	8002708 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80026da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e00f      	b.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4013      	ands	r3, r2
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	429a      	cmp	r2, r3
 8002724:	d0c3      	beq.n	80026ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8002746:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff ff7e 	bl	8002688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b21      	cmp	r3, #33	@ 0x21
 80027a6:	d144      	bne.n	8002832 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b0:	d11a      	bne.n	80027e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	1c9a      	adds	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	621a      	str	r2, [r3, #32]
 80027da:	e00e      	b.n	80027fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	621a      	str	r2, [r3, #32]
 80027e6:	e008      	b.n	80027fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	1c59      	adds	r1, r3, #1
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6211      	str	r1, [r2, #32]
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29b      	uxth	r3, r3
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4619      	mov	r1, r3
 8002808:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800282c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
  }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002856:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff07 	bl	8002674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b22      	cmp	r3, #34	@ 0x22
 8002882:	d171      	bne.n	8002968 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288c:	d123      	bne.n	80028d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10e      	bne.n	80028ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	1c9a      	adds	r2, r3, #2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80028b8:	e029      	b.n	800290e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80028d4:	e01b      	b.n	800290e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6858      	ldr	r0, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	1c59      	adds	r1, r3, #1
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6291      	str	r1, [r2, #40]	@ 0x28
 80028ee:	b2c2      	uxtb	r2, r0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e00c      	b.n	800290e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	1c58      	adds	r0, r3, #1
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	6288      	str	r0, [r1, #40]	@ 0x28
 8002906:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29b      	uxth	r3, r3
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4619      	mov	r1, r3
 800291c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800291e:	2b00      	cmp	r3, #0
 8002920:	d120      	bne.n	8002964 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0220 	bic.w	r2, r2, #32
 8002930:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002940:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f001 f954 	bl	8003c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e002      	b.n	800296a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800297c:	af00      	add	r7, sp, #0
 800297e:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002982:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800298e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002992:	68d9      	ldr	r1, [r3, #12]
 8002994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	ea40 0301 	orr.w	r3, r0, r1
 800299e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 80029c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029ce:	f021 010c 	bic.w	r1, r1, #12
 80029d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80029dc:	430b      	orrs	r3, r1
 80029de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029f0:	6999      	ldr	r1, [r3, #24]
 80029f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	ea40 0301 	orr.w	r3, r0, r1
 80029fc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a08:	f040 824a 	bne.w	8002ea0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b96      	ldr	r3, [pc, #600]	@ (8002c6c <UART_SetConfig+0x2f8>)
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d006      	beq.n	8002a26 <UART_SetConfig+0xb2>
 8002a18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b94      	ldr	r3, [pc, #592]	@ (8002c70 <UART_SetConfig+0x2fc>)
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f040 8129 	bne.w	8002c78 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a26:	f7ff f95d 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8002a2a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8002a38:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8002a3c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8002a40:	4622      	mov	r2, r4
 8002a42:	462b      	mov	r3, r5
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002a4a:	415b      	adcs	r3, r3
 8002a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002a50:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8002a54:	4621      	mov	r1, r4
 8002a56:	1851      	adds	r1, r2, r1
 8002a58:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	414b      	adcs	r3, r1
 8002a60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8002a70:	4649      	mov	r1, r9
 8002a72:	00cb      	lsls	r3, r1, #3
 8002a74:	4641      	mov	r1, r8
 8002a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	00ca      	lsls	r2, r1, #3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	4622      	mov	r2, r4
 8002a86:	189b      	adds	r3, r3, r2
 8002a88:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	460a      	mov	r2, r1
 8002a90:	eb42 0303 	adc.w	r3, r2, r3
 8002a94:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002a98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002aa4:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8002aa8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8002aac:	460b      	mov	r3, r1
 8002aae:	18db      	adds	r3, r3, r3
 8002ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	eb42 0303 	adc.w	r3, r2, r3
 8002aba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002abe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002ac2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8002ac6:	f7fd fb99 	bl	80001fc <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4b69      	ldr	r3, [pc, #420]	@ (8002c74 <UART_SetConfig+0x300>)
 8002ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	011c      	lsls	r4, r3, #4
 8002ad8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8002ae2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002ae6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8002aea:	4642      	mov	r2, r8
 8002aec:	464b      	mov	r3, r9
 8002aee:	1891      	adds	r1, r2, r2
 8002af0:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002af4:	415b      	adcs	r3, r3
 8002af6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002afa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8002afe:	4641      	mov	r1, r8
 8002b00:	1851      	adds	r1, r2, r1
 8002b02:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8002b06:	4649      	mov	r1, r9
 8002b08:	414b      	adcs	r3, r1
 8002b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8002b1a:	4659      	mov	r1, fp
 8002b1c:	00cb      	lsls	r3, r1, #3
 8002b1e:	4651      	mov	r1, sl
 8002b20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b24:	4651      	mov	r1, sl
 8002b26:	00ca      	lsls	r2, r1, #3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4642      	mov	r2, r8
 8002b30:	189b      	adds	r3, r3, r2
 8002b32:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8002b36:	464b      	mov	r3, r9
 8002b38:	460a      	mov	r2, r1
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8002b42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002b4e:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8002b52:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8002b56:	460b      	mov	r3, r1
 8002b58:	18db      	adds	r3, r3, r3
 8002b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b5e:	4613      	mov	r3, r2
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b68:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002b6c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8002b70:	f7fd fb44 	bl	80001fc <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c74 <UART_SetConfig+0x300>)
 8002b7c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	2264      	movs	r2, #100	@ 0x64
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	1acb      	subs	r3, r1, r3
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b90:	4b38      	ldr	r3, [pc, #224]	@ (8002c74 <UART_SetConfig+0x300>)
 8002b92:	fba3 2302 	umull	r2, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b9e:	441c      	add	r4, r3
 8002ba0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002baa:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8002bae:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8002bb2:	4642      	mov	r2, r8
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	1891      	adds	r1, r2, r2
 8002bb8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002bc2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	1851      	adds	r1, r2, r1
 8002bca:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8002bce:	4649      	mov	r1, r9
 8002bd0:	414b      	adcs	r3, r1
 8002bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8002be2:	4659      	mov	r1, fp
 8002be4:	00cb      	lsls	r3, r1, #3
 8002be6:	4651      	mov	r1, sl
 8002be8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bec:	4651      	mov	r1, sl
 8002bee:	00ca      	lsls	r2, r1, #3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4642      	mov	r2, r8
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	460a      	mov	r2, r1
 8002c02:	eb42 0303 	adc.w	r3, r2, r3
 8002c06:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002c16:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002c1a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	18db      	adds	r3, r3, r3
 8002c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c26:	4613      	mov	r3, r2
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c30:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002c34:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8002c38:	f7fd fae0 	bl	80001fc <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <UART_SetConfig+0x300>)
 8002c42:	fba3 1302 	umull	r1, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2164      	movs	r1, #100	@ 0x64
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	3332      	adds	r3, #50	@ 0x32
 8002c54:	4a07      	ldr	r2, [pc, #28]	@ (8002c74 <UART_SetConfig+0x300>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	f003 0207 	and.w	r2, r3, #7
 8002c60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4422      	add	r2, r4
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	e34a      	b.n	8003302 <UART_SetConfig+0x98e>
 8002c6c:	40011000 	.word	0x40011000
 8002c70:	40011400 	.word	0x40011400
 8002c74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7ff f820 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002c7c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c84:	2200      	movs	r2, #0
 8002c86:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002c8a:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8002c8e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	1891      	adds	r1, r2, r2
 8002c98:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002c9c:	415b      	adcs	r3, r3
 8002c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ca2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	eb12 0a01 	adds.w	sl, r2, r1
 8002cac:	4629      	mov	r1, r5
 8002cae:	eb43 0b01 	adc.w	fp, r3, r1
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cc6:	4692      	mov	sl, r2
 8002cc8:	469b      	mov	fp, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	eb1a 0303 	adds.w	r3, sl, r3
 8002cd0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	eb4b 0303 	adc.w	r3, fp, r3
 8002cda:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002cde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8002cea:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002cee:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	18db      	adds	r3, r3, r3
 8002cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d04:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002d08:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002d0c:	f7fd fa76 	bl	80001fc <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4b61      	ldr	r3, [pc, #388]	@ (8002e9c <UART_SetConfig+0x528>)
 8002d16:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	011c      	lsls	r4, r3, #4
 8002d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002d28:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8002d2c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8002d30:	4642      	mov	r2, r8
 8002d32:	464b      	mov	r3, r9
 8002d34:	1891      	adds	r1, r2, r2
 8002d36:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002d38:	415b      	adcs	r3, r3
 8002d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d3c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002d40:	4641      	mov	r1, r8
 8002d42:	1851      	adds	r1, r2, r1
 8002d44:	6739      	str	r1, [r7, #112]	@ 0x70
 8002d46:	4649      	mov	r1, r9
 8002d48:	414b      	adcs	r3, r1
 8002d4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8002d58:	4659      	mov	r1, fp
 8002d5a:	00cb      	lsls	r3, r1, #3
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d62:	4651      	mov	r1, sl
 8002d64:	00ca      	lsls	r2, r1, #3
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002d74:	464b      	mov	r3, r9
 8002d76:	460a      	mov	r2, r1
 8002d78:	eb42 0303 	adc.w	r3, r2, r3
 8002d7c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8002d80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002d8c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8002d90:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8002d94:	460b      	mov	r3, r1
 8002d96:	18db      	adds	r3, r3, r3
 8002d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	eb42 0303 	adc.w	r3, r2, r3
 8002da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002da2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002da6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002daa:	f7fd fa27 	bl	80001fc <__aeabi_uldivmod>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	4b39      	ldr	r3, [pc, #228]	@ (8002e9c <UART_SetConfig+0x528>)
 8002db6:	fba3 2301 	umull	r2, r3, r3, r1
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2264      	movs	r2, #100	@ 0x64
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	1acb      	subs	r3, r1, r3
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dca:	4b34      	ldr	r3, [pc, #208]	@ (8002e9c <UART_SetConfig+0x528>)
 8002dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dd8:	441c      	add	r4, r3
 8002dda:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002de4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002de8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	1891      	adds	r1, r2, r2
 8002df2:	6639      	str	r1, [r7, #96]	@ 0x60
 8002df4:	415b      	adcs	r3, r3
 8002df6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002df8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	1851      	adds	r1, r2, r1
 8002e00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e02:	4649      	mov	r1, r9
 8002e04:	414b      	adcs	r3, r1
 8002e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8002e14:	4659      	mov	r1, fp
 8002e16:	00cb      	lsls	r3, r1, #3
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1e:	4651      	mov	r1, sl
 8002e20:	00ca      	lsls	r2, r1, #3
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	4642      	mov	r2, r8
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002e30:	464b      	mov	r3, r9
 8002e32:	460a      	mov	r2, r1
 8002e34:	eb42 0303 	adc.w	r3, r2, r3
 8002e38:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002e3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002e48:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8002e4c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8002e50:	460b      	mov	r3, r1
 8002e52:	18db      	adds	r3, r3, r3
 8002e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e56:	4613      	mov	r3, r2
 8002e58:	eb42 0303 	adc.w	r3, r2, r3
 8002e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e62:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8002e66:	f7fd f9c9 	bl	80001fc <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <UART_SetConfig+0x528>)
 8002e70:	fba3 1302 	umull	r1, r3, r3, r2
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	2164      	movs	r1, #100	@ 0x64
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	3332      	adds	r3, #50	@ 0x32
 8002e82:	4a06      	ldr	r2, [pc, #24]	@ (8002e9c <UART_SetConfig+0x528>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	f003 0207 	and.w	r2, r3, #7
 8002e8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4422      	add	r2, r4
 8002e96:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e98:	e233      	b.n	8003302 <UART_SetConfig+0x98e>
 8002e9a:	bf00      	nop
 8002e9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ea0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80030dc <UART_SetConfig+0x768>)
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d006      	beq.n	8002eba <UART_SetConfig+0x546>
 8002eac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	@ (80030e0 <UART_SetConfig+0x76c>)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f040 8117 	bne.w	80030e8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eba:	f7fe ff13 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8002ebe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8002ecc:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8002ed0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	1891      	adds	r1, r2, r2
 8002eda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002edc:	415b      	adcs	r3, r3
 8002ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	eb12 0801 	adds.w	r8, r2, r1
 8002eea:	4629      	mov	r1, r5
 8002eec:	eb43 0901 	adc.w	r9, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f04:	4690      	mov	r8, r2
 8002f06:	4699      	mov	r9, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	eb18 0303 	adds.w	r3, r8, r3
 8002f0e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002f12:	462b      	mov	r3, r5
 8002f14:	eb49 0303 	adc.w	r3, r9, r3
 8002f18:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002f1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002f28:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8002f38:	4629      	mov	r1, r5
 8002f3a:	008b      	lsls	r3, r1, #2
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f42:	4621      	mov	r1, r4
 8002f44:	008a      	lsls	r2, r1, #2
 8002f46:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8002f4a:	f7fd f957 	bl	80001fc <__aeabi_uldivmod>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4b64      	ldr	r3, [pc, #400]	@ (80030e4 <UART_SetConfig+0x770>)
 8002f54:	fba3 2302 	umull	r2, r3, r3, r2
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	011c      	lsls	r4, r3, #4
 8002f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002f66:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002f6a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8002f6e:	4642      	mov	r2, r8
 8002f70:	464b      	mov	r3, r9
 8002f72:	1891      	adds	r1, r2, r2
 8002f74:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f76:	415b      	adcs	r3, r3
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f7e:	4641      	mov	r1, r8
 8002f80:	1851      	adds	r1, r2, r1
 8002f82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f84:	4649      	mov	r1, r9
 8002f86:	414b      	adcs	r3, r1
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8002f96:	4659      	mov	r1, fp
 8002f98:	00cb      	lsls	r3, r1, #3
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	00ca      	lsls	r2, r1, #3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4642      	mov	r2, r8
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	eb42 0303 	adc.w	r3, r2, r3
 8002fba:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002fbe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002fca:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8002fda:	4649      	mov	r1, r9
 8002fdc:	008b      	lsls	r3, r1, #2
 8002fde:	4641      	mov	r1, r8
 8002fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	008a      	lsls	r2, r1, #2
 8002fe8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8002fec:	f7fd f906 	bl	80001fc <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <UART_SetConfig+0x770>)
 8002ff8:	fba3 2301 	umull	r2, r3, r3, r1
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	2264      	movs	r2, #100	@ 0x64
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	1acb      	subs	r3, r1, r3
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	3332      	adds	r3, #50	@ 0x32
 800300a:	4a36      	ldr	r2, [pc, #216]	@ (80030e4 <UART_SetConfig+0x770>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003016:	441c      	add	r4, r3
 8003018:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003022:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8003026:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 800302a:	4642      	mov	r2, r8
 800302c:	464b      	mov	r3, r9
 800302e:	1891      	adds	r1, r2, r2
 8003030:	6339      	str	r1, [r7, #48]	@ 0x30
 8003032:	415b      	adcs	r3, r3
 8003034:	637b      	str	r3, [r7, #52]	@ 0x34
 8003036:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800303a:	4641      	mov	r1, r8
 800303c:	1851      	adds	r1, r2, r1
 800303e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003040:	4649      	mov	r1, r9
 8003042:	414b      	adcs	r3, r1
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8003052:	4659      	mov	r1, fp
 8003054:	00cb      	lsls	r3, r1, #3
 8003056:	4651      	mov	r1, sl
 8003058:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800305c:	4651      	mov	r1, sl
 800305e:	00ca      	lsls	r2, r1, #3
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	4603      	mov	r3, r0
 8003066:	4642      	mov	r2, r8
 8003068:	189b      	adds	r3, r3, r2
 800306a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800306e:	464b      	mov	r3, r9
 8003070:	460a      	mov	r2, r1
 8003072:	eb42 0303 	adc.w	r3, r2, r3
 8003076:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800307a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003086:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8003096:	4649      	mov	r1, r9
 8003098:	008b      	lsls	r3, r1, #2
 800309a:	4641      	mov	r1, r8
 800309c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a0:	4641      	mov	r1, r8
 80030a2:	008a      	lsls	r2, r1, #2
 80030a4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80030a8:	f7fd f8a8 	bl	80001fc <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <UART_SetConfig+0x770>)
 80030b2:	fba3 1302 	umull	r1, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2164      	movs	r1, #100	@ 0x64
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	3332      	adds	r3, #50	@ 0x32
 80030c4:	4a07      	ldr	r2, [pc, #28]	@ (80030e4 <UART_SetConfig+0x770>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4422      	add	r2, r4
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	e112      	b.n	8003302 <UART_SetConfig+0x98e>
 80030dc:	40011000 	.word	0x40011000
 80030e0:	40011400 	.word	0x40011400
 80030e4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7fe fde8 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 80030ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80030fa:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80030fe:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8003102:	4642      	mov	r2, r8
 8003104:	464b      	mov	r3, r9
 8003106:	1891      	adds	r1, r2, r2
 8003108:	6239      	str	r1, [r7, #32]
 800310a:	415b      	adcs	r3, r3
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
 800310e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003112:	4641      	mov	r1, r8
 8003114:	1854      	adds	r4, r2, r1
 8003116:	4649      	mov	r1, r9
 8003118:	eb43 0501 	adc.w	r5, r3, r1
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	00eb      	lsls	r3, r5, #3
 8003126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800312a:	00e2      	lsls	r2, r4, #3
 800312c:	4614      	mov	r4, r2
 800312e:	461d      	mov	r5, r3
 8003130:	4643      	mov	r3, r8
 8003132:	18e3      	adds	r3, r4, r3
 8003134:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003138:	464b      	mov	r3, r9
 800313a:	eb45 0303 	adc.w	r3, r5, r3
 800313e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003142:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800314e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800315e:	4629      	mov	r1, r5
 8003160:	008b      	lsls	r3, r1, #2
 8003162:	4621      	mov	r1, r4
 8003164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003168:	4621      	mov	r1, r4
 800316a:	008a      	lsls	r2, r1, #2
 800316c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003170:	f7fd f844 	bl	80001fc <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4b65      	ldr	r3, [pc, #404]	@ (8003310 <UART_SetConfig+0x99c>)
 800317a:	fba3 2302 	umull	r2, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	011c      	lsls	r4, r3, #4
 8003182:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800318c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003190:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	1891      	adds	r1, r2, r2
 800319a:	61b9      	str	r1, [r7, #24]
 800319c:	415b      	adcs	r3, r3
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a4:	4641      	mov	r1, r8
 80031a6:	1851      	adds	r1, r2, r1
 80031a8:	6139      	str	r1, [r7, #16]
 80031aa:	4649      	mov	r1, r9
 80031ac:	414b      	adcs	r3, r1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031bc:	4659      	mov	r1, fp
 80031be:	00cb      	lsls	r3, r1, #3
 80031c0:	4651      	mov	r1, sl
 80031c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c6:	4651      	mov	r1, sl
 80031c8:	00ca      	lsls	r2, r1, #3
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	4642      	mov	r2, r8
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031d8:	464b      	mov	r3, r9
 80031da:	460a      	mov	r2, r1
 80031dc:	eb42 0303 	adc.w	r3, r2, r3
 80031e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80031f0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8003200:	4649      	mov	r1, r9
 8003202:	008b      	lsls	r3, r1, #2
 8003204:	4641      	mov	r1, r8
 8003206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800320a:	4641      	mov	r1, r8
 800320c:	008a      	lsls	r2, r1, #2
 800320e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003212:	f7fc fff3 	bl	80001fc <__aeabi_uldivmod>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4611      	mov	r1, r2
 800321c:	4b3c      	ldr	r3, [pc, #240]	@ (8003310 <UART_SetConfig+0x99c>)
 800321e:	fba3 2301 	umull	r2, r3, r3, r1
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2264      	movs	r2, #100	@ 0x64
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	1acb      	subs	r3, r1, r3
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	3332      	adds	r3, #50	@ 0x32
 8003230:	4a37      	ldr	r2, [pc, #220]	@ (8003310 <UART_SetConfig+0x99c>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800323c:	441c      	add	r4, r3
 800323e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003248:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800324c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003250:	4642      	mov	r2, r8
 8003252:	464b      	mov	r3, r9
 8003254:	1891      	adds	r1, r2, r2
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	415b      	adcs	r3, r3
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003260:	4641      	mov	r1, r8
 8003262:	1851      	adds	r1, r2, r1
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	4649      	mov	r1, r9
 8003268:	414b      	adcs	r3, r1
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003278:	4659      	mov	r1, fp
 800327a:	00cb      	lsls	r3, r1, #3
 800327c:	4651      	mov	r1, sl
 800327e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003282:	4651      	mov	r1, sl
 8003284:	00ca      	lsls	r2, r1, #3
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	4603      	mov	r3, r0
 800328c:	4642      	mov	r2, r8
 800328e:	189b      	adds	r3, r3, r2
 8003290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003294:	464b      	mov	r3, r9
 8003296:	460a      	mov	r2, r1
 8003298:	eb42 0303 	adc.w	r3, r2, r3
 800329c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032ac:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80032bc:	4649      	mov	r1, r9
 80032be:	008b      	lsls	r3, r1, #2
 80032c0:	4641      	mov	r1, r8
 80032c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c6:	4641      	mov	r1, r8
 80032c8:	008a      	lsls	r2, r1, #2
 80032ca:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032ce:	f7fc ff95 	bl	80001fc <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <UART_SetConfig+0x99c>)
 80032d8:	fba3 1302 	umull	r1, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	2164      	movs	r1, #100	@ 0x64
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	3332      	adds	r3, #50	@ 0x32
 80032ea:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <UART_SetConfig+0x99c>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4422      	add	r2, r4
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	e7ff      	b.n	8003302 <UART_SetConfig+0x98e>
 8003302:	bf00      	nop
 8003304:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003308:	46bd      	mov	sp, r7
 800330a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330e:	bf00      	nop
 8003310:	51eb851f 	.word	0x51eb851f

08003314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	f107 0314 	add.w	r3, r7, #20
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <MX_GPIO_Init+0x108>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	4a3a      	ldr	r2, [pc, #232]	@ (800341c <MX_GPIO_Init+0x108>)
 8003334:	f043 0304 	orr.w	r3, r3, #4
 8003338:	6313      	str	r3, [r2, #48]	@ 0x30
 800333a:	4b38      	ldr	r3, [pc, #224]	@ (800341c <MX_GPIO_Init+0x108>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b34      	ldr	r3, [pc, #208]	@ (800341c <MX_GPIO_Init+0x108>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a33      	ldr	r2, [pc, #204]	@ (800341c <MX_GPIO_Init+0x108>)
 8003350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b31      	ldr	r3, [pc, #196]	@ (800341c <MX_GPIO_Init+0x108>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b2d      	ldr	r3, [pc, #180]	@ (800341c <MX_GPIO_Init+0x108>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	4a2c      	ldr	r2, [pc, #176]	@ (800341c <MX_GPIO_Init+0x108>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6313      	str	r3, [r2, #48]	@ 0x30
 8003372:	4b2a      	ldr	r3, [pc, #168]	@ (800341c <MX_GPIO_Init+0x108>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	4b26      	ldr	r3, [pc, #152]	@ (800341c <MX_GPIO_Init+0x108>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	4a25      	ldr	r2, [pc, #148]	@ (800341c <MX_GPIO_Init+0x108>)
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	6313      	str	r3, [r2, #48]	@ 0x30
 800338e:	4b23      	ldr	r3, [pc, #140]	@ (800341c <MX_GPIO_Init+0x108>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_ZONE_LEDON_Pin|BLUE_ZONE_LEDOFF_Pin|RED_ZONE_LEDON_Pin|GREEN_ZONE_LEDON_Pin, GPIO_PIN_RESET);
 800339a:	2200      	movs	r2, #0
 800339c:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80033a0:	481f      	ldr	r0, [pc, #124]	@ (8003420 <MX_GPIO_Init+0x10c>)
 80033a2:	f7fd fbf1 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_ZONE_LEDOFF_GPIO_Port, RED_ZONE_LEDOFF_Pin, GPIO_PIN_RESET);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2180      	movs	r1, #128	@ 0x80
 80033aa:	481e      	ldr	r0, [pc, #120]	@ (8003424 <MX_GPIO_Init+0x110>)
 80033ac:	f7fd fbec 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_ZONE_LEDOFF_GPIO_Port, GREEN_ZONE_LEDOFF_Pin, GPIO_PIN_RESET);
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033b6:	481c      	ldr	r0, [pc, #112]	@ (8003428 <MX_GPIO_Init+0x114>)
 80033b8:	f7fd fbe6 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BLUE_ZONE_LEDON_Pin|BLUE_ZONE_LEDOFF_Pin|RED_ZONE_LEDON_Pin|GREEN_ZONE_LEDON_Pin;
 80033bc:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 80033c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4619      	mov	r1, r3
 80033d4:	4812      	ldr	r0, [pc, #72]	@ (8003420 <MX_GPIO_Init+0x10c>)
 80033d6:	f7fd fa53 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_ZONE_LEDOFF_Pin;
 80033da:	2380      	movs	r3, #128	@ 0x80
 80033dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_ZONE_LEDOFF_GPIO_Port, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	480c      	ldr	r0, [pc, #48]	@ (8003424 <MX_GPIO_Init+0x110>)
 80033f2:	f7fd fa45 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_ZONE_LEDOFF_Pin;
 80033f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_ZONE_LEDOFF_GPIO_Port, &GPIO_InitStruct);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	4806      	ldr	r0, [pc, #24]	@ (8003428 <MX_GPIO_Init+0x114>)
 8003410:	f7fd fa36 	bl	8000880 <HAL_GPIO_Init>

}
 8003414:	bf00      	nop
 8003416:	3728      	adds	r7, #40	@ 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	40020000 	.word	0x40020000
 8003424:	40020800 	.word	0x40020800
 8003428:	40020400 	.word	0x40020400

0800342c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003430:	4b12      	ldr	r3, [pc, #72]	@ (800347c <MX_I2C1_Init+0x50>)
 8003432:	4a13      	ldr	r2, [pc, #76]	@ (8003480 <MX_I2C1_Init+0x54>)
 8003434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003436:	4b11      	ldr	r3, [pc, #68]	@ (800347c <MX_I2C1_Init+0x50>)
 8003438:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <MX_I2C1_Init+0x58>)
 800343a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800343c:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <MX_I2C1_Init+0x50>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003442:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <MX_I2C1_Init+0x50>)
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003448:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <MX_I2C1_Init+0x50>)
 800344a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800344e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003450:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <MX_I2C1_Init+0x50>)
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <MX_I2C1_Init+0x50>)
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800345c:	4b07      	ldr	r3, [pc, #28]	@ (800347c <MX_I2C1_Init+0x50>)
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <MX_I2C1_Init+0x50>)
 8003464:	2200      	movs	r2, #0
 8003466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003468:	4804      	ldr	r0, [pc, #16]	@ (800347c <MX_I2C1_Init+0x50>)
 800346a:	f7fd fba7 	bl	8000bbc <HAL_I2C_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003474:	f000 fc98 	bl	8003da8 <Error_Handler>
  }

}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}
 800347c:	2000002c 	.word	0x2000002c
 8003480:	40005400 	.word	0x40005400
 8003484:	00061a80 	.word	0x00061a80

08003488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	@ 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a19      	ldr	r2, [pc, #100]	@ (800350c <HAL_I2C_MspInit+0x84>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d12b      	bne.n	8003502 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	4b18      	ldr	r3, [pc, #96]	@ (8003510 <HAL_I2C_MspInit+0x88>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_I2C_MspInit+0x88>)
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <HAL_I2C_MspInit+0x88>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034c6:	23c0      	movs	r3, #192	@ 0xc0
 80034c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ca:	2312      	movs	r3, #18
 80034cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034d6:	2304      	movs	r3, #4
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	4619      	mov	r1, r3
 80034e0:	480c      	ldr	r0, [pc, #48]	@ (8003514 <HAL_I2C_MspInit+0x8c>)
 80034e2:	f7fd f9cd 	bl	8000880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <HAL_I2C_MspInit+0x88>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	4a08      	ldr	r2, [pc, #32]	@ (8003510 <HAL_I2C_MspInit+0x88>)
 80034f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_I2C_MspInit+0x88>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003502:	bf00      	nop
 8003504:	3728      	adds	r7, #40	@ 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40005400 	.word	0x40005400
 8003510:	40023800 	.word	0x40023800
 8003514:	40020400 	.word	0x40020400

08003518 <TIME_CONDITION>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


uint8_t TIME_CONDITION()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	return (HAL_GetTick() - led_on_time >= 5000);
 800351c:	f7fd f84c 	bl	80005b8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <TIME_CONDITION+0x24>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3287 	movw	r2, #4999	@ 0x1387
 800352c:	4293      	cmp	r3, r2
 800352e:	bf8c      	ite	hi
 8003530:	2301      	movhi	r3, #1
 8003532:	2300      	movls	r3, #0
 8003534:	b2db      	uxtb	r3, r3
}
 8003536:	4618      	mov	r0, r3
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000084 	.word	0x20000084

08003540 <LED_ON_CONDITION>:

uint8_t LED_ON_CONDITION() {
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
	return led_on > 0 && (TIME_CONDITION());
 8003544:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <LED_ON_CONDITION+0x24>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d006      	beq.n	800355a <LED_ON_CONDITION+0x1a>
 800354c:	f7ff ffe4 	bl	8003518 <TIME_CONDITION>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <LED_ON_CONDITION+0x1a>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <LED_ON_CONDITION+0x1c>
 800355a:	2300      	movs	r3, #0
 800355c:	b2db      	uxtb	r3, r3
}
 800355e:	4618      	mov	r0, r3
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000081 	.word	0x20000081

08003568 <buffer_push>:

// Adds a character to the circular buffer if space is available

void buffer_push(CircularBuffer *cb, char data) {
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
	if (cb->count < BUFFER_SIZE) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7a9b      	ldrb	r3, [r3, #10]
 8003578:	2b07      	cmp	r3, #7
 800357a:	d818      	bhi.n	80035ae <buffer_push+0x46>
		cb->buffer[cb->head] = data;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7a1b      	ldrb	r3, [r3, #8]
 8003580:	4619      	mov	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	545a      	strb	r2, [r3, r1]
		cb->head = (cb->head + 1) % BUFFER_SIZE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7a1b      	ldrb	r3, [r3, #8]
 800358c:	3301      	adds	r3, #1
 800358e:	425a      	negs	r2, r3
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	f002 0207 	and.w	r2, r2, #7
 8003598:	bf58      	it	pl
 800359a:	4253      	negpl	r3, r2
 800359c:	b2da      	uxtb	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	721a      	strb	r2, [r3, #8]
		cb->count++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7a9b      	ldrb	r3, [r3, #10]
 80035a6:	3301      	adds	r3, #1
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	729a      	strb	r2, [r3, #10]
	}
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <buffer_pop>:

// Removes and returns a character from the circular buffer

char buffer_pop(CircularBuffer *cb) {
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
	if (cb->count > 0) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7a9b      	ldrb	r3, [r3, #10]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01a      	beq.n	8003600 <buffer_pop+0x46>
		char data = cb->buffer[cb->tail];
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7a5b      	ldrb	r3, [r3, #9]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	5c9b      	ldrb	r3, [r3, r2]
 80035d4:	73fb      	strb	r3, [r7, #15]
		cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7a5b      	ldrb	r3, [r3, #9]
 80035da:	3301      	adds	r3, #1
 80035dc:	425a      	negs	r2, r3
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	f002 0207 	and.w	r2, r2, #7
 80035e6:	bf58      	it	pl
 80035e8:	4253      	negpl	r3, r2
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	725a      	strb	r2, [r3, #9]
		cb->count--;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7a9b      	ldrb	r3, [r3, #10]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	729a      	strb	r2, [r3, #10]
		return data;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	e000      	b.n	8003602 <buffer_pop+0x48>
	}
	return 0;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <buffer_available>:

// Returns the number of characters in the circular buffer


uint8_t buffer_available(CircularBuffer *cb) {
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
	return cb->count;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7a9b      	ldrb	r3, [r3, #10]
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <DEFAULT_SCREEN>:

void DEFAULT_SCREEN() {
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800362e:	2000      	movs	r0, #0
 8003630:	f000 fc64 	bl	8003efc <ssd1306_Fill>
    ssd1306_DrawBitmap(BITMAP_X, BITMAP_Y, epd_bitmap_car, BITMAP_WIDTH, BITMAP_HEIGHT, White);
 8003634:	2301      	movs	r3, #1
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2340      	movs	r3, #64	@ 0x40
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2366      	movs	r3, #102	@ 0x66
 800363e:	4a18      	ldr	r2, [pc, #96]	@ (80036a0 <DEFAULT_SCREEN+0x78>)
 8003640:	211e      	movs	r1, #30
 8003642:	200f      	movs	r0, #15
 8003644:	f000 fdbc 	bl	80041c0 <ssd1306_DrawBitmap>
    ssd1306_SetCursor(10, 0);
 8003648:	2100      	movs	r1, #0
 800364a:	200a      	movs	r0, #10
 800364c:	f000 fda0 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("Parking Managament System", FONT_SYSTEM_SIZE, White);
 8003650:	4b14      	ldr	r3, [pc, #80]	@ (80036a4 <DEFAULT_SCREEN+0x7c>)
 8003652:	2201      	movs	r2, #1
 8003654:	9200      	str	r2, [sp, #0]
 8003656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003658:	4813      	ldr	r0, [pc, #76]	@ (80036a8 <DEFAULT_SCREEN+0x80>)
 800365a:	f000 fd73 	bl	8004144 <ssd1306_WriteString>
    ssd1306_SetCursor(50, 9);
 800365e:	2109      	movs	r1, #9
 8003660:	2032      	movs	r0, #50	@ 0x32
 8003662:	f000 fd95 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("System", FONT_SYSTEM_SIZE, White);
 8003666:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <DEFAULT_SCREEN+0x7c>)
 8003668:	2201      	movs	r2, #1
 800366a:	9200      	str	r2, [sp, #0]
 800366c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800366e:	480f      	ldr	r0, [pc, #60]	@ (80036ac <DEFAULT_SCREEN+0x84>)
 8003670:	f000 fd68 	bl	8004144 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8003674:	f000 fc5a 	bl	8003f2c <ssd1306_UpdateScreen>
    HAL_GPIO_WritePin(GREEN_ZONE_LEDOFF_GPIO_Port, GREEN_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800367e:	480c      	ldr	r0, [pc, #48]	@ (80036b0 <DEFAULT_SCREEN+0x88>)
 8003680:	f7fd fa82 	bl	8000b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BLUE_ZONE_LEDOFF_GPIO_Port, BLUE_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	2140      	movs	r1, #64	@ 0x40
 8003688:	480a      	ldr	r0, [pc, #40]	@ (80036b4 <DEFAULT_SCREEN+0x8c>)
 800368a:	f7fd fa7d 	bl	8000b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_ZONE_LEDOFF_GPIO_Port, RED_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
 800368e:	2201      	movs	r2, #1
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	4809      	ldr	r0, [pc, #36]	@ (80036b8 <DEFAULT_SCREEN+0x90>)
 8003694:	f7fd fa78 	bl	8000b88 <HAL_GPIO_WritePin>
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	080046e8 	.word	0x080046e8
 80036a4:	08006ad0 	.word	0x08006ad0
 80036a8:	08004660 	.word	0x08004660
 80036ac:	0800467c 	.word	0x0800467c
 80036b0:	40020400 	.word	0x40020400
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020800 	.word	0x40020800

080036bc <GREEN_ZONE_NOTIFICATION_ENTRY>:

void GREEN_ZONE_NOTIFICATION_ENTRY() {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f000 fc1a 	bl	8003efc <ssd1306_Fill>
    ssd1306_SetCursor(CURSOR_TITLE_X, CURSOR_TITLE_Y);
 80036c8:	2100      	movs	r1, #0
 80036ca:	2007      	movs	r0, #7
 80036cc:	f000 fd60 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("Dostep do strefy:", FONT_NOTIFICATION_TITLE, White);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <GREEN_ZONE_NOTIFICATION_ENTRY+0x44>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	9200      	str	r2, [sp, #0]
 80036d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d8:	480a      	ldr	r0, [pc, #40]	@ (8003704 <GREEN_ZONE_NOTIFICATION_ENTRY+0x48>)
 80036da:	f000 fd33 	bl	8004144 <ssd1306_WriteString>
    ssd1306_SetCursor(CURSOR_GREEN_X, CURSOR_GREEN_Y);
 80036de:	2119      	movs	r1, #25
 80036e0:	201a      	movs	r0, #26
 80036e2:	f000 fd55 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("GREEN", FONT_ZONE_NAME, White);
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <GREEN_ZONE_NOTIFICATION_ENTRY+0x4c>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	9200      	str	r2, [sp, #0]
 80036ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ee:	4807      	ldr	r0, [pc, #28]	@ (800370c <GREEN_ZONE_NOTIFICATION_ENTRY+0x50>)
 80036f0:	f000 fd28 	bl	8004144 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80036f4:	f000 fc1a 	bl	8003f2c <ssd1306_UpdateScreen>
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	08006adc 	.word	0x08006adc
 8003704:	08004684 	.word	0x08004684
 8003708:	08006ae8 	.word	0x08006ae8
 800370c:	08004698 	.word	0x08004698

08003710 <GREEN_ZONE_NOTIFICATION_NO_ENTRY>:

void GREEN_ZONE_NOTIFICATION_NO_ENTRY() {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8003716:	2000      	movs	r0, #0
 8003718:	f000 fbf0 	bl	8003efc <ssd1306_Fill>
    ssd1306_SetCursor(CURSOR_TITLE_X, CURSOR_TITLE_Y);
 800371c:	2100      	movs	r1, #0
 800371e:	2007      	movs	r0, #7
 8003720:	f000 fd36 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("ZAKAZ do strefy:", FONT_NOTIFICATION_TITLE, White);
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <GREEN_ZONE_NOTIFICATION_NO_ENTRY+0x44>)
 8003726:	2201      	movs	r2, #1
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372c:	480a      	ldr	r0, [pc, #40]	@ (8003758 <GREEN_ZONE_NOTIFICATION_NO_ENTRY+0x48>)
 800372e:	f000 fd09 	bl	8004144 <ssd1306_WriteString>
    ssd1306_SetCursor(CURSOR_GREEN_X, CURSOR_GREEN_Y);
 8003732:	2119      	movs	r1, #25
 8003734:	201a      	movs	r0, #26
 8003736:	f000 fd2b 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("GREEN", FONT_ZONE_NAME, White);
 800373a:	4b08      	ldr	r3, [pc, #32]	@ (800375c <GREEN_ZONE_NOTIFICATION_NO_ENTRY+0x4c>)
 800373c:	2201      	movs	r2, #1
 800373e:	9200      	str	r2, [sp, #0]
 8003740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003742:	4807      	ldr	r0, [pc, #28]	@ (8003760 <GREEN_ZONE_NOTIFICATION_NO_ENTRY+0x50>)
 8003744:	f000 fcfe 	bl	8004144 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8003748:	f000 fbf0 	bl	8003f2c <ssd1306_UpdateScreen>
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	08006adc 	.word	0x08006adc
 8003758:	080046a0 	.word	0x080046a0
 800375c:	08006ae8 	.word	0x08006ae8
 8003760:	08004698 	.word	0x08004698

08003764 <BLUE_ZONE_NOTIFICATION_NO_ENTRY>:

void BLUE_ZONE_NOTIFICATION_NO_ENTRY() {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800376a:	2000      	movs	r0, #0
 800376c:	f000 fbc6 	bl	8003efc <ssd1306_Fill>
    ssd1306_SetCursor(CURSOR_TITLE_X, CURSOR_TITLE_Y);
 8003770:	2100      	movs	r1, #0
 8003772:	2007      	movs	r0, #7
 8003774:	f000 fd0c 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("ZAKAZ do strefy:", FONT_NOTIFICATION_TITLE, White);
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <BLUE_ZONE_NOTIFICATION_NO_ENTRY+0x44>)
 800377a:	2201      	movs	r2, #1
 800377c:	9200      	str	r2, [sp, #0]
 800377e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003780:	480a      	ldr	r0, [pc, #40]	@ (80037ac <BLUE_ZONE_NOTIFICATION_NO_ENTRY+0x48>)
 8003782:	f000 fcdf 	bl	8004144 <ssd1306_WriteString>
    ssd1306_SetCursor(CURSOR_BLUE_X, CURSOR_BLUE_Y);
 8003786:	2119      	movs	r1, #25
 8003788:	2022      	movs	r0, #34	@ 0x22
 800378a:	f000 fd01 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("BLUE", FONT_ZONE_NAME, White);
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <BLUE_ZONE_NOTIFICATION_NO_ENTRY+0x4c>)
 8003790:	2201      	movs	r2, #1
 8003792:	9200      	str	r2, [sp, #0]
 8003794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003796:	4807      	ldr	r0, [pc, #28]	@ (80037b4 <BLUE_ZONE_NOTIFICATION_NO_ENTRY+0x50>)
 8003798:	f000 fcd4 	bl	8004144 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800379c:	f000 fbc6 	bl	8003f2c <ssd1306_UpdateScreen>
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	08006adc 	.word	0x08006adc
 80037ac:	080046a0 	.word	0x080046a0
 80037b0:	08006ae8 	.word	0x08006ae8
 80037b4:	080046b4 	.word	0x080046b4

080037b8 <RED_ZONE_NOTIFICATION_NO_ENTRY>:

void RED_ZONE_NOTIFICATION_NO_ENTRY() {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80037be:	2000      	movs	r0, #0
 80037c0:	f000 fb9c 	bl	8003efc <ssd1306_Fill>
    ssd1306_SetCursor(CURSOR_TITLE_X, CURSOR_TITLE_Y);
 80037c4:	2100      	movs	r1, #0
 80037c6:	2007      	movs	r0, #7
 80037c8:	f000 fce2 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("ZAKAZ do strefy:", FONT_NOTIFICATION_TITLE, White);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <RED_ZONE_NOTIFICATION_NO_ENTRY+0x44>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	9200      	str	r2, [sp, #0]
 80037d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d4:	480a      	ldr	r0, [pc, #40]	@ (8003800 <RED_ZONE_NOTIFICATION_NO_ENTRY+0x48>)
 80037d6:	f000 fcb5 	bl	8004144 <ssd1306_WriteString>
    ssd1306_SetCursor(CURSOR_RED_X, CURSOR_RED_Y);
 80037da:	2119      	movs	r1, #25
 80037dc:	2026      	movs	r0, #38	@ 0x26
 80037de:	f000 fcd7 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("RED", FONT_ZONE_NAME, White);
 80037e2:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <RED_ZONE_NOTIFICATION_NO_ENTRY+0x4c>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	9200      	str	r2, [sp, #0]
 80037e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ea:	4807      	ldr	r0, [pc, #28]	@ (8003808 <RED_ZONE_NOTIFICATION_NO_ENTRY+0x50>)
 80037ec:	f000 fcaa 	bl	8004144 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80037f0:	f000 fb9c 	bl	8003f2c <ssd1306_UpdateScreen>
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08006adc 	.word	0x08006adc
 8003800:	080046a0 	.word	0x080046a0
 8003804:	08006ae8 	.word	0x08006ae8
 8003808:	080046bc 	.word	0x080046bc

0800380c <BLUE_ZONE_NOTIFICATION_ENTRY>:

void BLUE_ZONE_NOTIFICATION_ENTRY() {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8003812:	2000      	movs	r0, #0
 8003814:	f000 fb72 	bl	8003efc <ssd1306_Fill>
    ssd1306_SetCursor(CURSOR_TITLE_X, CURSOR_TITLE_Y);
 8003818:	2100      	movs	r1, #0
 800381a:	2007      	movs	r0, #7
 800381c:	f000 fcb8 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("Dostep do strefy:", FONT_NOTIFICATION_TITLE, White);
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <BLUE_ZONE_NOTIFICATION_ENTRY+0x44>)
 8003822:	2201      	movs	r2, #1
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003828:	480a      	ldr	r0, [pc, #40]	@ (8003854 <BLUE_ZONE_NOTIFICATION_ENTRY+0x48>)
 800382a:	f000 fc8b 	bl	8004144 <ssd1306_WriteString>
    ssd1306_SetCursor(CURSOR_BLUE_X, CURSOR_BLUE_Y);
 800382e:	2119      	movs	r1, #25
 8003830:	2022      	movs	r0, #34	@ 0x22
 8003832:	f000 fcad 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("BLUE", FONT_ZONE_NAME, White);
 8003836:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <BLUE_ZONE_NOTIFICATION_ENTRY+0x4c>)
 8003838:	2201      	movs	r2, #1
 800383a:	9200      	str	r2, [sp, #0]
 800383c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800383e:	4807      	ldr	r0, [pc, #28]	@ (800385c <BLUE_ZONE_NOTIFICATION_ENTRY+0x50>)
 8003840:	f000 fc80 	bl	8004144 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8003844:	f000 fb72 	bl	8003f2c <ssd1306_UpdateScreen>
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	08006adc 	.word	0x08006adc
 8003854:	08004684 	.word	0x08004684
 8003858:	08006ae8 	.word	0x08006ae8
 800385c:	080046b4 	.word	0x080046b4

08003860 <RED_ZONE_NOTIFICATION_ENTRY>:

void RED_ZONE_NOTIFICATION_ENTRY() {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8003866:	2000      	movs	r0, #0
 8003868:	f000 fb48 	bl	8003efc <ssd1306_Fill>
    ssd1306_SetCursor(CURSOR_TITLE_X, CURSOR_TITLE_Y);
 800386c:	2100      	movs	r1, #0
 800386e:	2007      	movs	r0, #7
 8003870:	f000 fc8e 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("Dostep do strefy:", FONT_NOTIFICATION_TITLE, White);
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <RED_ZONE_NOTIFICATION_ENTRY+0x44>)
 8003876:	2201      	movs	r2, #1
 8003878:	9200      	str	r2, [sp, #0]
 800387a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800387c:	480a      	ldr	r0, [pc, #40]	@ (80038a8 <RED_ZONE_NOTIFICATION_ENTRY+0x48>)
 800387e:	f000 fc61 	bl	8004144 <ssd1306_WriteString>
    ssd1306_SetCursor(CURSOR_RED_X, CURSOR_RED_Y);
 8003882:	2119      	movs	r1, #25
 8003884:	2026      	movs	r0, #38	@ 0x26
 8003886:	f000 fc83 	bl	8004190 <ssd1306_SetCursor>
    ssd1306_WriteString("RED", FONT_ZONE_NAME, White);
 800388a:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <RED_ZONE_NOTIFICATION_ENTRY+0x4c>)
 800388c:	2201      	movs	r2, #1
 800388e:	9200      	str	r2, [sp, #0]
 8003890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003892:	4807      	ldr	r0, [pc, #28]	@ (80038b0 <RED_ZONE_NOTIFICATION_ENTRY+0x50>)
 8003894:	f000 fc56 	bl	8004144 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8003898:	f000 fb48 	bl	8003f2c <ssd1306_UpdateScreen>
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08006adc 	.word	0x08006adc
 80038a8:	08004684 	.word	0x08004684
 80038ac:	08006ae8 	.word	0x08006ae8
 80038b0:	080046bc 	.word	0x080046bc

080038b4 <GREEN_ZONE_LED>:

void GREEN_ZONE_LED() {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	GREEN_ZONE_NOTIFICATION_ENTRY();
 80038b8:	f7ff ff00 	bl	80036bc <GREEN_ZONE_NOTIFICATION_ENTRY>
	HAL_GPIO_WritePin(GREEN_ZONE_LEDON_GPIO_Port, GREEN_ZONE_LEDON_Pin,
 80038bc:	2201      	movs	r2, #1
 80038be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038c2:	4809      	ldr	r0, [pc, #36]	@ (80038e8 <GREEN_ZONE_LED+0x34>)
 80038c4:	f7fd f960 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(GREEN_ZONE_LEDOFF_GPIO_Port, GREEN_ZONE_LEDOFF_Pin,
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038ce:	4807      	ldr	r0, [pc, #28]	@ (80038ec <GREEN_ZONE_LED+0x38>)
 80038d0:	f7fd f95a 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	led_on = 1;
 80038d4:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <GREEN_ZONE_LED+0x3c>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
	led_on_time = HAL_GetTick();
 80038da:	f7fc fe6d 	bl	80005b8 <HAL_GetTick>
 80038de:	4603      	mov	r3, r0
 80038e0:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <GREEN_ZONE_LED+0x40>)
 80038e2:	6013      	str	r3, [r2, #0]

}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020400 	.word	0x40020400
 80038f0:	20000081 	.word	0x20000081
 80038f4:	20000084 	.word	0x20000084

080038f8 <GREEN_ZONE_LED_ON>:

void GREEN_ZONE_LED_ON() {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_ZONE_LEDON_GPIO_Port,
 80038fc:	2200      	movs	r2, #0
 80038fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003902:	4806      	ldr	r0, [pc, #24]	@ (800391c <GREEN_ZONE_LED_ON+0x24>)
 8003904:	f7fd f940 	bl	8000b88 <HAL_GPIO_WritePin>
	GREEN_ZONE_LEDON_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GREEN_ZONE_LEDOFF_GPIO_Port,
 8003908:	2201      	movs	r2, #1
 800390a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800390e:	4804      	ldr	r0, [pc, #16]	@ (8003920 <GREEN_ZONE_LED_ON+0x28>)
 8003910:	f7fd f93a 	bl	8000b88 <HAL_GPIO_WritePin>
	GREEN_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
	DEFAULT_SCREEN();
 8003914:	f7ff fe88 	bl	8003628 <DEFAULT_SCREEN>
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40020000 	.word	0x40020000
 8003920:	40020400 	.word	0x40020400

08003924 <BLUE_ZONE_LED>:

void BLUE_ZONE_LED() {
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	BLUE_ZONE_NOTIFICATION_ENTRY();
 8003928:	f7ff ff70 	bl	800380c <BLUE_ZONE_NOTIFICATION_ENTRY>
	HAL_GPIO_WritePin(BLUE_ZONE_LEDON_GPIO_Port, BLUE_ZONE_LEDON_Pin,
 800392c:	2201      	movs	r2, #1
 800392e:	2120      	movs	r1, #32
 8003930:	4808      	ldr	r0, [pc, #32]	@ (8003954 <BLUE_ZONE_LED+0x30>)
 8003932:	f7fd f929 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(BLUE_ZONE_LEDOFF_GPIO_Port, BLUE_ZONE_LEDOFF_Pin,
 8003936:	2200      	movs	r2, #0
 8003938:	2140      	movs	r1, #64	@ 0x40
 800393a:	4806      	ldr	r0, [pc, #24]	@ (8003954 <BLUE_ZONE_LED+0x30>)
 800393c:	f7fd f924 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	led_on = 2;
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <BLUE_ZONE_LED+0x34>)
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
	led_on_time = HAL_GetTick();
 8003946:	f7fc fe37 	bl	80005b8 <HAL_GetTick>
 800394a:	4603      	mov	r3, r0
 800394c:	4a03      	ldr	r2, [pc, #12]	@ (800395c <BLUE_ZONE_LED+0x38>)
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40020000 	.word	0x40020000
 8003958:	20000081 	.word	0x20000081
 800395c:	20000084 	.word	0x20000084

08003960 <BLUE_ZONE_LED_ON>:

void BLUE_ZONE_LED_ON() {
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLUE_ZONE_LEDON_GPIO_Port,
 8003964:	2200      	movs	r2, #0
 8003966:	2120      	movs	r1, #32
 8003968:	4805      	ldr	r0, [pc, #20]	@ (8003980 <BLUE_ZONE_LED_ON+0x20>)
 800396a:	f7fd f90d 	bl	8000b88 <HAL_GPIO_WritePin>
	BLUE_ZONE_LEDON_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BLUE_ZONE_LEDOFF_GPIO_Port,
 800396e:	2201      	movs	r2, #1
 8003970:	2140      	movs	r1, #64	@ 0x40
 8003972:	4803      	ldr	r0, [pc, #12]	@ (8003980 <BLUE_ZONE_LED_ON+0x20>)
 8003974:	f7fd f908 	bl	8000b88 <HAL_GPIO_WritePin>
	BLUE_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
	DEFAULT_SCREEN();
 8003978:	f7ff fe56 	bl	8003628 <DEFAULT_SCREEN>
}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40020000 	.word	0x40020000

08003984 <RED_ZONE_LED>:

void RED_ZONE_LED() {
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
	RED_ZONE_NOTIFICATION_ENTRY();
 8003988:	f7ff ff6a 	bl	8003860 <RED_ZONE_NOTIFICATION_ENTRY>
	HAL_GPIO_WritePin(RED_ZONE_LEDON_GPIO_Port, RED_ZONE_LEDON_Pin,
 800398c:	2201      	movs	r2, #1
 800398e:	2180      	movs	r1, #128	@ 0x80
 8003990:	4808      	ldr	r0, [pc, #32]	@ (80039b4 <RED_ZONE_LED+0x30>)
 8003992:	f7fd f8f9 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(RED_ZONE_LEDOFF_GPIO_Port, RED_ZONE_LEDOFF_Pin,
 8003996:	2200      	movs	r2, #0
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	4807      	ldr	r0, [pc, #28]	@ (80039b8 <RED_ZONE_LED+0x34>)
 800399c:	f7fd f8f4 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	led_on = 3;
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <RED_ZONE_LED+0x38>)
 80039a2:	2203      	movs	r2, #3
 80039a4:	701a      	strb	r2, [r3, #0]
	led_on_time = HAL_GetTick();
 80039a6:	f7fc fe07 	bl	80005b8 <HAL_GetTick>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4a04      	ldr	r2, [pc, #16]	@ (80039c0 <RED_ZONE_LED+0x3c>)
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40020800 	.word	0x40020800
 80039bc:	20000081 	.word	0x20000081
 80039c0:	20000084 	.word	0x20000084

080039c4 <RED_ZONE_LED_ON>:

void RED_ZONE_LED_ON() {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_ZONE_LEDON_GPIO_Port, RED_ZONE_LEDON_Pin,
 80039c8:	2200      	movs	r2, #0
 80039ca:	2180      	movs	r1, #128	@ 0x80
 80039cc:	4805      	ldr	r0, [pc, #20]	@ (80039e4 <RED_ZONE_LED_ON+0x20>)
 80039ce:	f7fd f8db 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RED_ZONE_LEDOFF_GPIO_Port,
 80039d2:	2201      	movs	r2, #1
 80039d4:	2180      	movs	r1, #128	@ 0x80
 80039d6:	4804      	ldr	r0, [pc, #16]	@ (80039e8 <RED_ZONE_LED_ON+0x24>)
 80039d8:	f7fd f8d6 	bl	8000b88 <HAL_GPIO_WritePin>
	RED_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
	DEFAULT_SCREEN();
 80039dc:	f7ff fe24 	bl	8003628 <DEFAULT_SCREEN>
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020800 	.word	0x40020800

080039ec <GREEN_ZONE_NO_ENTRY>:

void GREEN_ZONE_NO_ENTRY() {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
	GREEN_ZONE_NOTIFICATION_NO_ENTRY();
 80039f0:	f7ff fe8e 	bl	8003710 <GREEN_ZONE_NOTIFICATION_NO_ENTRY>
	led_on = 4;
 80039f4:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <GREEN_ZONE_NO_ENTRY+0x1c>)
 80039f6:	2204      	movs	r2, #4
 80039f8:	701a      	strb	r2, [r3, #0]
	led_on_time = HAL_GetTick();
 80039fa:	f7fc fddd 	bl	80005b8 <HAL_GetTick>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a02      	ldr	r2, [pc, #8]	@ (8003a0c <GREEN_ZONE_NO_ENTRY+0x20>)
 8003a02:	6013      	str	r3, [r2, #0]
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000081 	.word	0x20000081
 8003a0c:	20000084 	.word	0x20000084

08003a10 <GREEN_ZONE_LED_NO_ENTRY>:

void GREEN_ZONE_LED_NO_ENTRY() {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_ZONE_LEDON_GPIO_Port,
 8003a14:	2200      	movs	r2, #0
 8003a16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a1a:	4806      	ldr	r0, [pc, #24]	@ (8003a34 <GREEN_ZONE_LED_NO_ENTRY+0x24>)
 8003a1c:	f7fd f8b4 	bl	8000b88 <HAL_GPIO_WritePin>
	GREEN_ZONE_LEDON_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GREEN_ZONE_LEDOFF_GPIO_Port,
 8003a20:	2201      	movs	r2, #1
 8003a22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a26:	4804      	ldr	r0, [pc, #16]	@ (8003a38 <GREEN_ZONE_LED_NO_ENTRY+0x28>)
 8003a28:	f7fd f8ae 	bl	8000b88 <HAL_GPIO_WritePin>
	GREEN_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
	DEFAULT_SCREEN();
 8003a2c:	f7ff fdfc 	bl	8003628 <DEFAULT_SCREEN>
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40020000 	.word	0x40020000
 8003a38:	40020400 	.word	0x40020400

08003a3c <BLUE_ZONE_NO_ENTRY>:

void BLUE_ZONE_NO_ENTRY() {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	BLUE_ZONE_NOTIFICATION_NO_ENTRY();
 8003a40:	f7ff fe90 	bl	8003764 <BLUE_ZONE_NOTIFICATION_NO_ENTRY>
	led_on = 5;
 8003a44:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <BLUE_ZONE_NO_ENTRY+0x1c>)
 8003a46:	2205      	movs	r2, #5
 8003a48:	701a      	strb	r2, [r3, #0]
	led_on_time = HAL_GetTick();
 8003a4a:	f7fc fdb5 	bl	80005b8 <HAL_GetTick>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4a02      	ldr	r2, [pc, #8]	@ (8003a5c <BLUE_ZONE_NO_ENTRY+0x20>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000081 	.word	0x20000081
 8003a5c:	20000084 	.word	0x20000084

08003a60 <BLUE_ZONE_LED_NO_ENTRY>:

void BLUE_ZONE_LED_NO_ENTRY() {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLUE_ZONE_LEDON_GPIO_Port,
 8003a64:	2200      	movs	r2, #0
 8003a66:	2120      	movs	r1, #32
 8003a68:	4805      	ldr	r0, [pc, #20]	@ (8003a80 <BLUE_ZONE_LED_NO_ENTRY+0x20>)
 8003a6a:	f7fd f88d 	bl	8000b88 <HAL_GPIO_WritePin>
	BLUE_ZONE_LEDON_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BLUE_ZONE_LEDOFF_GPIO_Port,
 8003a6e:	2201      	movs	r2, #1
 8003a70:	2140      	movs	r1, #64	@ 0x40
 8003a72:	4803      	ldr	r0, [pc, #12]	@ (8003a80 <BLUE_ZONE_LED_NO_ENTRY+0x20>)
 8003a74:	f7fd f888 	bl	8000b88 <HAL_GPIO_WritePin>
	BLUE_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
	DEFAULT_SCREEN();
 8003a78:	f7ff fdd6 	bl	8003628 <DEFAULT_SCREEN>
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40020000 	.word	0x40020000

08003a84 <RED_ZONE_NO_ENTRY>:

void RED_ZONE_NO_ENTRY() {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
	RED_ZONE_NOTIFICATION_NO_ENTRY();
 8003a88:	f7ff fe96 	bl	80037b8 <RED_ZONE_NOTIFICATION_NO_ENTRY>
	led_on = 6;
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <RED_ZONE_NO_ENTRY+0x1c>)
 8003a8e:	2206      	movs	r2, #6
 8003a90:	701a      	strb	r2, [r3, #0]
	led_on_time = HAL_GetTick();
 8003a92:	f7fc fd91 	bl	80005b8 <HAL_GetTick>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4a02      	ldr	r2, [pc, #8]	@ (8003aa4 <RED_ZONE_NO_ENTRY+0x20>)
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000081 	.word	0x20000081
 8003aa4:	20000084 	.word	0x20000084

08003aa8 <RED_ZONE_LED_NO_ENTRY>:

void RED_ZONE_LED_NO_ENTRY() {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_ZONE_LEDON_GPIO_Port, RED_ZONE_LEDON_Pin,
 8003aac:	2200      	movs	r2, #0
 8003aae:	2180      	movs	r1, #128	@ 0x80
 8003ab0:	4805      	ldr	r0, [pc, #20]	@ (8003ac8 <RED_ZONE_LED_NO_ENTRY+0x20>)
 8003ab2:	f7fd f869 	bl	8000b88 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RED_ZONE_LEDOFF_GPIO_Port,
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	4804      	ldr	r0, [pc, #16]	@ (8003acc <RED_ZONE_LED_NO_ENTRY+0x24>)
 8003abc:	f7fd f864 	bl	8000b88 <HAL_GPIO_WritePin>
	RED_ZONE_LEDOFF_Pin, GPIO_PIN_SET);
	DEFAULT_SCREEN();
 8003ac0:	f7ff fdb2 	bl	8003628 <DEFAULT_SCREEN>
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40020800 	.word	0x40020800

08003ad0 <process_command>:

/* Function to process the received command */

void process_command(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0

	while (buffer_available(&rx_buffer) >= 2) {
 8003ad6:	e05b      	b.n	8003b90 <process_command+0xc0>
		char command[3] = { 0 };
 8003ad8:	4b33      	ldr	r3, [pc, #204]	@ (8003ba8 <process_command+0xd8>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	80bb      	strh	r3, [r7, #4]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	71bb      	strb	r3, [r7, #6]
		command[0] = buffer_pop(&rx_buffer);
 8003ae2:	4832      	ldr	r0, [pc, #200]	@ (8003bac <process_command+0xdc>)
 8003ae4:	f7ff fd69 	bl	80035ba <buffer_pop>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	713b      	strb	r3, [r7, #4]
		command[1] = buffer_pop(&rx_buffer);
 8003aec:	482f      	ldr	r0, [pc, #188]	@ (8003bac <process_command+0xdc>)
 8003aee:	f7ff fd64 	bl	80035ba <buffer_pop>
 8003af2:	4603      	mov	r3, r0
 8003af4:	717b      	strb	r3, [r7, #5]

		if (strlen(command) == 2 && TIME_CONDITION()) {
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fb77 	bl	80001ec <strlen>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d145      	bne.n	8003b90 <process_command+0xc0>
 8003b04:	f7ff fd08 	bl	8003518 <TIME_CONDITION>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d040      	beq.n	8003b90 <process_command+0xc0>
			if (strcmp(command, "11") == 0) {
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	4927      	ldr	r1, [pc, #156]	@ (8003bb0 <process_command+0xe0>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fb60 	bl	80001d8 <strcmp>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <process_command+0x54>
				GREEN_ZONE_LED();
 8003b1e:	f7ff fec9 	bl	80038b4 <GREEN_ZONE_LED>
 8003b22:	e035      	b.n	8003b90 <process_command+0xc0>
			} else if (strcmp(command, "21") == 0) {
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	4923      	ldr	r1, [pc, #140]	@ (8003bb4 <process_command+0xe4>)
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fc fb55 	bl	80001d8 <strcmp>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <process_command+0x6a>
				BLUE_ZONE_LED();
 8003b34:	f7ff fef6 	bl	8003924 <BLUE_ZONE_LED>
 8003b38:	e02a      	b.n	8003b90 <process_command+0xc0>
			} else if (strcmp(command, "31") == 0) {
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	491e      	ldr	r1, [pc, #120]	@ (8003bb8 <process_command+0xe8>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc fb4a 	bl	80001d8 <strcmp>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <process_command+0x80>
				RED_ZONE_LED();
 8003b4a:	f7ff ff1b 	bl	8003984 <RED_ZONE_LED>
 8003b4e:	e01f      	b.n	8003b90 <process_command+0xc0>
			} else if (strcmp(command, "10") == 0) {
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	491a      	ldr	r1, [pc, #104]	@ (8003bbc <process_command+0xec>)
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fb3f 	bl	80001d8 <strcmp>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <process_command+0x96>
				GREEN_ZONE_NO_ENTRY();
 8003b60:	f7ff ff44 	bl	80039ec <GREEN_ZONE_NO_ENTRY>
 8003b64:	e014      	b.n	8003b90 <process_command+0xc0>
			} else if (strcmp(command, "20") == 0) {
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	4915      	ldr	r1, [pc, #84]	@ (8003bc0 <process_command+0xf0>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc fb34 	bl	80001d8 <strcmp>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <process_command+0xac>
				BLUE_ZONE_NO_ENTRY();
 8003b76:	f7ff ff61 	bl	8003a3c <BLUE_ZONE_NO_ENTRY>
 8003b7a:	e009      	b.n	8003b90 <process_command+0xc0>
			} else if (strcmp(command, "30") == 0) {
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	4911      	ldr	r1, [pc, #68]	@ (8003bc4 <process_command+0xf4>)
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc fb29 	bl	80001d8 <strcmp>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <process_command+0xc0>
				RED_ZONE_NO_ENTRY();
 8003b8c:	f7ff ff7a 	bl	8003a84 <RED_ZONE_NO_ENTRY>
	while (buffer_available(&rx_buffer) >= 2) {
 8003b90:	4806      	ldr	r0, [pc, #24]	@ (8003bac <process_command+0xdc>)
 8003b92:	f7ff fd3c 	bl	800360e <buffer_available>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d89d      	bhi.n	8003ad8 <process_command+0x8>
			}

		}
	}

}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	080046d8 	.word	0x080046d8
 8003bac:	20000088 	.word	0x20000088
 8003bb0:	080046c0 	.word	0x080046c0
 8003bb4:	080046c4 	.word	0x080046c4
 8003bb8:	080046c8 	.word	0x080046c8
 8003bbc:	080046cc 	.word	0x080046cc
 8003bc0:	080046d0 	.word	0x080046d0
 8003bc4:	080046d4 	.word	0x080046d4

08003bc8 <UART_TransmitInit>:

/* Function to process UART transmission */


void UART_TransmitInit() {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
	char message[] = "Init MSG\r\n";
 8003bce:	4a0c      	ldr	r2, [pc, #48]	@ (8003c00 <UART_TransmitInit+0x38>)
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bd4:	c303      	stmia	r3!, {r0, r1}
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	0c12      	lsrs	r2, r2, #16
 8003bdc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), 1000);
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fb03 	bl	80001ec <strlen>
 8003be6:	4603      	mov	r3, r0
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	1d39      	adds	r1, r7, #4
 8003bec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bf0:	4804      	ldr	r0, [pc, #16]	@ (8003c04 <UART_TransmitInit+0x3c>)
 8003bf2:	f7fe fb50 	bl	8002296 <HAL_UART_Transmit>
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	080046dc 	.word	0x080046dc
 8003c04:	200004dc 	.word	0x200004dc

08003c08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a09      	ldr	r2, [pc, #36]	@ (8003c3c <HAL_UART_RxCpltCallback+0x34>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10b      	bne.n	8003c32 <HAL_UART_RxCpltCallback+0x2a>
		buffer_push(&rx_buffer, rx_data[0]);
 8003c1a:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <HAL_UART_RxCpltCallback+0x38>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	4808      	ldr	r0, [pc, #32]	@ (8003c44 <HAL_UART_RxCpltCallback+0x3c>)
 8003c24:	f7ff fca0 	bl	8003568 <buffer_push>
		HAL_UART_Receive_IT(&huart2, (uint8_t *) rx_data, 1);
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4905      	ldr	r1, [pc, #20]	@ (8003c40 <HAL_UART_RxCpltCallback+0x38>)
 8003c2c:	4806      	ldr	r0, [pc, #24]	@ (8003c48 <HAL_UART_RxCpltCallback+0x40>)
 8003c2e:	f7fe fbcb 	bl	80023c8 <HAL_UART_Receive_IT>
	}
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	20000080 	.word	0x20000080
 8003c44:	20000088 	.word	0x20000088
 8003c48:	200004dc 	.word	0x200004dc

08003c4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003c50:	f7fc fc4c 	bl	80004ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003c54:	f000 f84a 	bl	8003cec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003c58:	f7ff fb5c 	bl	8003314 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003c5c:	f000 fc24 	bl	80044a8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8003c60:	f000 fbb4 	bl	80043cc <MX_TIM2_Init>
	MX_I2C1_Init();
 8003c64:	f7ff fbe2 	bl	800342c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	UART_TransmitInit();
 8003c68:	f7ff ffae 	bl	8003bc8 <UART_TransmitInit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) rx_data, 1);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	491c      	ldr	r1, [pc, #112]	@ (8003ce0 <main+0x94>)
 8003c70:	481c      	ldr	r0, [pc, #112]	@ (8003ce4 <main+0x98>)
 8003c72:	f7fe fba9 	bl	80023c8 <HAL_UART_Receive_IT>
	ssd1306_Init();
 8003c76:	f000 f8d7 	bl	8003e28 <ssd1306_Init>
	DEFAULT_SCREEN();
 8003c7a:	f7ff fcd5 	bl	8003628 <DEFAULT_SCREEN>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		process_command();
 8003c7e:	f7ff ff27 	bl	8003ad0 <process_command>
		if (LED_ON_CONDITION()) {
 8003c82:	f7ff fc5d 	bl	8003540 <LED_ON_CONDITION>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f8      	beq.n	8003c7e <main+0x32>
			switch (led_on) {
 8003c8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <main+0x9c>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d820      	bhi.n	8003cd8 <main+0x8c>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <main+0x50>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cb5 	.word	0x08003cb5
 8003ca0:	08003cbb 	.word	0x08003cbb
 8003ca4:	08003cc1 	.word	0x08003cc1
 8003ca8:	08003cc7 	.word	0x08003cc7
 8003cac:	08003ccd 	.word	0x08003ccd
 8003cb0:	08003cd3 	.word	0x08003cd3
			case 1:
				GREEN_ZONE_LED_ON();
 8003cb4:	f7ff fe20 	bl	80038f8 <GREEN_ZONE_LED_ON>
				break;
 8003cb8:	e00e      	b.n	8003cd8 <main+0x8c>
			case 2:
				BLUE_ZONE_LED_ON();
 8003cba:	f7ff fe51 	bl	8003960 <BLUE_ZONE_LED_ON>
				break;
 8003cbe:	e00b      	b.n	8003cd8 <main+0x8c>
			case 3:
				RED_ZONE_LED_ON();
 8003cc0:	f7ff fe80 	bl	80039c4 <RED_ZONE_LED_ON>
				break;
 8003cc4:	e008      	b.n	8003cd8 <main+0x8c>
			case 4:
				GREEN_ZONE_LED_NO_ENTRY();
 8003cc6:	f7ff fea3 	bl	8003a10 <GREEN_ZONE_LED_NO_ENTRY>
				break;
 8003cca:	e005      	b.n	8003cd8 <main+0x8c>
			case 5:
				BLUE_ZONE_LED_NO_ENTRY();
 8003ccc:	f7ff fec8 	bl	8003a60 <BLUE_ZONE_LED_NO_ENTRY>
				break;
 8003cd0:	e002      	b.n	8003cd8 <main+0x8c>
			case 6:
				RED_ZONE_LED_NO_ENTRY();
 8003cd2:	f7ff fee9 	bl	8003aa8 <RED_ZONE_LED_NO_ENTRY>
				break;
 8003cd6:	bf00      	nop
			}
			led_on = 0;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <main+0x9c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
		process_command();
 8003cde:	e7ce      	b.n	8003c7e <main+0x32>
 8003ce0:	20000080 	.word	0x20000080
 8003ce4:	200004dc 	.word	0x200004dc
 8003ce8:	20000081 	.word	0x20000081

08003cec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b094      	sub	sp, #80	@ 0x50
 8003cf0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003cf2:	f107 0320 	add.w	r3, r7, #32
 8003cf6:	2230      	movs	r2, #48	@ 0x30
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fc77 	bl	80045ee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	4b22      	ldr	r3, [pc, #136]	@ (8003da0 <SystemClock_Config+0xb4>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	4a21      	ldr	r2, [pc, #132]	@ (8003da0 <SystemClock_Config+0xb4>)
 8003d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d20:	4b1f      	ldr	r3, [pc, #124]	@ (8003da0 <SystemClock_Config+0xb4>)
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	4b1c      	ldr	r3, [pc, #112]	@ (8003da4 <SystemClock_Config+0xb8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1b      	ldr	r2, [pc, #108]	@ (8003da4 <SystemClock_Config+0xb8>)
 8003d36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <SystemClock_Config+0xb8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d50:	2310      	movs	r3, #16
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003d58:	f107 0320 	add.w	r3, r7, #32
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd fb87 	bl	8001470 <HAL_RCC_OscConfig>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <SystemClock_Config+0x80>
		Error_Handler();
 8003d68:	f000 f81e 	bl	8003da8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003d6c:	230f      	movs	r3, #15
 8003d6e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd fde0 	bl	800194c <HAL_RCC_ClockConfig>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <SystemClock_Config+0xaa>
		Error_Handler();
 8003d92:	f000 f809 	bl	8003da8 <Error_Handler>
	}
}
 8003d96:	bf00      	nop
 8003d98:	3750      	adds	r7, #80	@ 0x50
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000

08003da8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af04      	add	r7, sp, #16
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	9302      	str	r3, [sp, #8]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	2200      	movs	r2, #0
 8003de0:	2178      	movs	r1, #120	@ 0x78
 8003de2:	4803      	ldr	r0, [pc, #12]	@ (8003df0 <ssd1306_WriteCommand+0x2c>)
 8003de4:	f7fd f82e 	bl	8000e44 <HAL_I2C_Mem_Write>
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	2000002c 	.word	0x2000002c

08003df4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af04      	add	r7, sp, #16
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f04f 32ff 	mov.w	r2, #4294967295
 8003e06:	9202      	str	r2, [sp, #8]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2240      	movs	r2, #64	@ 0x40
 8003e12:	2178      	movs	r1, #120	@ 0x78
 8003e14:	4803      	ldr	r0, [pc, #12]	@ (8003e24 <ssd1306_WriteData+0x30>)
 8003e16:	f7fd f815 	bl	8000e44 <HAL_I2C_Mem_Write>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	2000002c 	.word	0x2000002c

08003e28 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003e2c:	f7ff ffc3 	bl	8003db6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003e30:	2064      	movs	r0, #100	@ 0x64
 8003e32:	f7fc fbcd 	bl	80005d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003e36:	2000      	movs	r0, #0
 8003e38:	f000 fa30 	bl	800429c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003e3c:	2020      	movs	r0, #32
 8003e3e:	f7ff ffc1 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003e42:	2000      	movs	r0, #0
 8003e44:	f7ff ffbe 	bl	8003dc4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e48:	20b0      	movs	r0, #176	@ 0xb0
 8003e4a:	f7ff ffbb 	bl	8003dc4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003e4e:	20c8      	movs	r0, #200	@ 0xc8
 8003e50:	f7ff ffb8 	bl	8003dc4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7ff ffb5 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e5a:	2010      	movs	r0, #16
 8003e5c:	f7ff ffb2 	bl	8003dc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e60:	2040      	movs	r0, #64	@ 0x40
 8003e62:	f7ff ffaf 	bl	8003dc4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003e66:	20ff      	movs	r0, #255	@ 0xff
 8003e68:	f000 fa05 	bl	8004276 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003e6c:	20a1      	movs	r0, #161	@ 0xa1
 8003e6e:	f7ff ffa9 	bl	8003dc4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e72:	20a6      	movs	r0, #166	@ 0xa6
 8003e74:	f7ff ffa6 	bl	8003dc4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e78:	20a8      	movs	r0, #168	@ 0xa8
 8003e7a:	f7ff ffa3 	bl	8003dc4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003e7e:	203f      	movs	r0, #63	@ 0x3f
 8003e80:	f7ff ffa0 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e84:	20a4      	movs	r0, #164	@ 0xa4
 8003e86:	f7ff ff9d 	bl	8003dc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e8a:	20d3      	movs	r0, #211	@ 0xd3
 8003e8c:	f7ff ff9a 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7ff ff97 	bl	8003dc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e96:	20d5      	movs	r0, #213	@ 0xd5
 8003e98:	f7ff ff94 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e9c:	20f0      	movs	r0, #240	@ 0xf0
 8003e9e:	f7ff ff91 	bl	8003dc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003ea2:	20d9      	movs	r0, #217	@ 0xd9
 8003ea4:	f7ff ff8e 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003ea8:	2022      	movs	r0, #34	@ 0x22
 8003eaa:	f7ff ff8b 	bl	8003dc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003eae:	20da      	movs	r0, #218	@ 0xda
 8003eb0:	f7ff ff88 	bl	8003dc4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003eb4:	2012      	movs	r0, #18
 8003eb6:	f7ff ff85 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003eba:	20db      	movs	r0, #219	@ 0xdb
 8003ebc:	f7ff ff82 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003ec0:	2020      	movs	r0, #32
 8003ec2:	f7ff ff7f 	bl	8003dc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003ec6:	208d      	movs	r0, #141	@ 0x8d
 8003ec8:	f7ff ff7c 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003ecc:	2014      	movs	r0, #20
 8003ece:	f7ff ff79 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f000 f9e2 	bl	800429c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f000 f80f 	bl	8003efc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003ede:	f000 f825 	bl	8003f2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003ee2:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <ssd1306_Init+0xd0>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <ssd1306_Init+0xd0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003eee:	4b02      	ldr	r3, [pc, #8]	@ (8003ef8 <ssd1306_Init+0xd0>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	711a      	strb	r2, [r3, #4]
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000494 	.word	0x20000494

08003efc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <ssd1306_Fill+0x14>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <ssd1306_Fill+0x16>
 8003f10:	23ff      	movs	r3, #255	@ 0xff
 8003f12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f16:	4619      	mov	r1, r3
 8003f18:	4803      	ldr	r0, [pc, #12]	@ (8003f28 <ssd1306_Fill+0x2c>)
 8003f1a:	f000 fb68 	bl	80045ee <memset>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000094 	.word	0x20000094

08003f2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f32:	2300      	movs	r3, #0
 8003f34:	71fb      	strb	r3, [r7, #7]
 8003f36:	e016      	b.n	8003f66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	3b50      	subs	r3, #80	@ 0x50
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff40 	bl	8003dc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7ff ff3d 	bl	8003dc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003f4a:	2010      	movs	r0, #16
 8003f4c:	f7ff ff3a 	bl	8003dc4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	01db      	lsls	r3, r3, #7
 8003f54:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <ssd1306_UpdateScreen+0x4c>)
 8003f56:	4413      	add	r3, r2
 8003f58:	2180      	movs	r1, #128	@ 0x80
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff ff4a 	bl	8003df4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	3301      	adds	r3, #1
 8003f64:	71fb      	strb	r3, [r7, #7]
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	2b07      	cmp	r3, #7
 8003f6a:	d9e5      	bls.n	8003f38 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000094 	.word	0x20000094

08003f7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
 8003f86:	460b      	mov	r3, r1
 8003f88:	71bb      	strb	r3, [r7, #6]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db3d      	blt.n	8004012 <ssd1306_DrawPixel+0x96>
 8003f96:	79bb      	ldrb	r3, [r7, #6]
 8003f98:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f9a:	d83a      	bhi.n	8004012 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003f9c:	797b      	ldrb	r3, [r7, #5]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d11a      	bne.n	8003fd8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003fa2:	79fa      	ldrb	r2, [r7, #7]
 8003fa4:	79bb      	ldrb	r3, [r7, #6]
 8003fa6:	08db      	lsrs	r3, r3, #3
 8003fa8:	b2d8      	uxtb	r0, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	01db      	lsls	r3, r3, #7
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004020 <ssd1306_DrawPixel+0xa4>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	b25a      	sxtb	r2, r3
 8003fb6:	79bb      	ldrb	r3, [r7, #6]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b259      	sxtb	r1, r3
 8003fc8:	79fa      	ldrb	r2, [r7, #7]
 8003fca:	4603      	mov	r3, r0
 8003fcc:	01db      	lsls	r3, r3, #7
 8003fce:	4413      	add	r3, r2
 8003fd0:	b2c9      	uxtb	r1, r1
 8003fd2:	4a13      	ldr	r2, [pc, #76]	@ (8004020 <ssd1306_DrawPixel+0xa4>)
 8003fd4:	54d1      	strb	r1, [r2, r3]
 8003fd6:	e01d      	b.n	8004014 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003fd8:	79fa      	ldrb	r2, [r7, #7]
 8003fda:	79bb      	ldrb	r3, [r7, #6]
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	b2d8      	uxtb	r0, r3
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <ssd1306_DrawPixel+0xa4>)
 8003fe8:	5cd3      	ldrb	r3, [r2, r3]
 8003fea:	b25a      	sxtb	r2, r3
 8003fec:	79bb      	ldrb	r3, [r7, #6]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	4013      	ands	r3, r2
 8004000:	b259      	sxtb	r1, r3
 8004002:	79fa      	ldrb	r2, [r7, #7]
 8004004:	4603      	mov	r3, r0
 8004006:	01db      	lsls	r3, r3, #7
 8004008:	4413      	add	r3, r2
 800400a:	b2c9      	uxtb	r1, r1
 800400c:	4a04      	ldr	r2, [pc, #16]	@ (8004020 <ssd1306_DrawPixel+0xa4>)
 800400e:	54d1      	strb	r1, [r2, r3]
 8004010:	e000      	b.n	8004014 <ssd1306_DrawPixel+0x98>
        return;
 8004012:	bf00      	nop
    }
}
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000094 	.word	0x20000094

08004024 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b089      	sub	sp, #36	@ 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	4604      	mov	r4, r0
 800402c:	4638      	mov	r0, r7
 800402e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004032:	4623      	mov	r3, r4
 8004034:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b1f      	cmp	r3, #31
 800403a:	d902      	bls.n	8004042 <ssd1306_WriteChar+0x1e>
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004040:	d901      	bls.n	8004046 <ssd1306_WriteChar+0x22>
        return 0;
 8004042:	2300      	movs	r3, #0
 8004044:	e077      	b.n	8004136 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004046:	4b3e      	ldr	r3, [pc, #248]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	783b      	ldrb	r3, [r7, #0]
 800404e:	4413      	add	r3, r2
 8004050:	2b80      	cmp	r3, #128	@ 0x80
 8004052:	dc06      	bgt.n	8004062 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004054:	4b3a      	ldr	r3, [pc, #232]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 8004056:	885b      	ldrh	r3, [r3, #2]
 8004058:	461a      	mov	r2, r3
 800405a:	787b      	ldrb	r3, [r7, #1]
 800405c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	dd01      	ble.n	8004066 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8004062:	2300      	movs	r3, #0
 8004064:	e067      	b.n	8004136 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e04e      	b.n	800410a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3b20      	subs	r3, #32
 8004072:	7879      	ldrb	r1, [r7, #1]
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4619      	mov	r1, r3
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	440b      	add	r3, r1
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e036      	b.n	80040fa <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800409c:	4b28      	ldr	r3, [pc, #160]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	b2d8      	uxtb	r0, r3
 80040aa:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 80040ac:	885b      	ldrh	r3, [r3, #2]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80040bc:	4619      	mov	r1, r3
 80040be:	f7ff ff5d 	bl	8003f7c <ssd1306_DrawPixel>
 80040c2:	e017      	b.n	80040f4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80040c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	b2d8      	uxtb	r0, r3
 80040d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 80040d4:	885b      	ldrh	r3, [r3, #2]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	4413      	add	r3, r2
 80040de:	b2d9      	uxtb	r1, r3
 80040e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7ff ff44 	bl	8003f7c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	783b      	ldrb	r3, [r7, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	4293      	cmp	r3, r2
 8004102:	d3c3      	bcc.n	800408c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	787b      	ldrb	r3, [r7, #1]
 800410c:	461a      	mov	r2, r3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4293      	cmp	r3, r2
 8004112:	d3ab      	bcc.n	800406c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8004114:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	2a00      	cmp	r2, #0
 800411c:	d005      	beq.n	800412a <ssd1306_WriteChar+0x106>
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	3a20      	subs	r2, #32
 8004124:	440a      	add	r2, r1
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	e000      	b.n	800412c <ssd1306_WriteChar+0x108>
 800412a:	783a      	ldrb	r2, [r7, #0]
 800412c:	4413      	add	r3, r2
 800412e:	b29a      	uxth	r2, r3
 8004130:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <ssd1306_WriteChar+0x11c>)
 8004132:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	@ 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd90      	pop	{r4, r7, pc}
 800413e:	bf00      	nop
 8004140:	20000494 	.word	0x20000494

08004144 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4638      	mov	r0, r7
 800414e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004152:	e013      	b.n	800417c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	7818      	ldrb	r0, [r3, #0]
 8004158:	7e3b      	ldrb	r3, [r7, #24]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	463b      	mov	r3, r7
 800415e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004160:	f7ff ff60 	bl	8004024 <ssd1306_WriteChar>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d002      	beq.n	8004176 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	e008      	b.n	8004188 <ssd1306_WriteString+0x44>
        }
        str++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e7      	bne.n	8004154 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	781b      	ldrb	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	460a      	mov	r2, r1
 800419a:	71fb      	strb	r3, [r7, #7]
 800419c:	4613      	mov	r3, r2
 800419e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <ssd1306_SetCursor+0x2c>)
 80041a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80041a8:	79bb      	ldrb	r3, [r7, #6]
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <ssd1306_SetCursor+0x2c>)
 80041ae:	805a      	strh	r2, [r3, #2]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	20000494 	.word	0x20000494

080041c0 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	603a      	str	r2, [r7, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
 80041ce:	460b      	mov	r3, r1
 80041d0:	71bb      	strb	r3, [r7, #6]
 80041d2:	4613      	mov	r3, r2
 80041d4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80041d6:	797b      	ldrb	r3, [r7, #5]
 80041d8:	3307      	adds	r3, #7
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da00      	bge.n	80041e0 <ssd1306_DrawBitmap+0x20>
 80041de:	3307      	adds	r3, #7
 80041e0:	10db      	asrs	r3, r3, #3
 80041e2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db3e      	blt.n	800426e <ssd1306_DrawBitmap+0xae>
 80041f0:	79bb      	ldrb	r3, [r7, #6]
 80041f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80041f4:	d83b      	bhi.n	800426e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80041f6:	2300      	movs	r3, #0
 80041f8:	73bb      	strb	r3, [r7, #14]
 80041fa:	e033      	b.n	8004264 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80041fc:	2300      	movs	r3, #0
 80041fe:	737b      	strb	r3, [r7, #13]
 8004200:	e026      	b.n	8004250 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8004202:	7b7b      	ldrb	r3, [r7, #13]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	e00d      	b.n	8004230 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	7b7a      	ldrb	r2, [r7, #13]
 8004220:	08d2      	lsrs	r2, r2, #3
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	4413      	add	r3, r2
 8004226:	461a      	mov	r2, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8004230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da08      	bge.n	800424a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8004238:	79fa      	ldrb	r2, [r7, #7]
 800423a:	7b7b      	ldrb	r3, [r7, #13]
 800423c:	4413      	add	r3, r2
 800423e:	b2db      	uxtb	r3, r3
 8004240:	7f3a      	ldrb	r2, [r7, #28]
 8004242:	79b9      	ldrb	r1, [r7, #6]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fe99 	bl	8003f7c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800424a:	7b7b      	ldrb	r3, [r7, #13]
 800424c:	3301      	adds	r3, #1
 800424e:	737b      	strb	r3, [r7, #13]
 8004250:	7b7a      	ldrb	r2, [r7, #13]
 8004252:	797b      	ldrb	r3, [r7, #5]
 8004254:	429a      	cmp	r2, r3
 8004256:	d3d4      	bcc.n	8004202 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	3301      	adds	r3, #1
 800425c:	73bb      	strb	r3, [r7, #14]
 800425e:	79bb      	ldrb	r3, [r7, #6]
 8004260:	3301      	adds	r3, #1
 8004262:	71bb      	strb	r3, [r7, #6]
 8004264:	7bba      	ldrb	r2, [r7, #14]
 8004266:	7e3b      	ldrb	r3, [r7, #24]
 8004268:	429a      	cmp	r2, r3
 800426a:	d3c7      	bcc.n	80041fc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800426c:	e000      	b.n	8004270 <ssd1306_DrawBitmap+0xb0>
        return;
 800426e:	bf00      	nop
}
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004280:	2381      	movs	r3, #129	@ 0x81
 8004282:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fd9c 	bl	8003dc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fd98 	bl	8003dc4 <ssd1306_WriteCommand>
}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80042ac:	23af      	movs	r3, #175	@ 0xaf
 80042ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80042b0:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <ssd1306_SetDisplayOn+0x38>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	715a      	strb	r2, [r3, #5]
 80042b6:	e004      	b.n	80042c2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80042b8:	23ae      	movs	r3, #174	@ 0xae
 80042ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <ssd1306_SetDisplayOn+0x38>)
 80042be:	2200      	movs	r2, #0
 80042c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fd7d 	bl	8003dc4 <ssd1306_WriteCommand>
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000494 	.word	0x20000494

080042d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <HAL_MspInit+0x4c>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004324 <HAL_MspInit+0x4c>)
 80042e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <HAL_MspInit+0x4c>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <HAL_MspInit+0x4c>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	4a08      	ldr	r2, [pc, #32]	@ (8004324 <HAL_MspInit+0x4c>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	@ 0x40
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_MspInit+0x4c>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <HardFault_Handler+0x4>

0800433e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <MemManage_Handler+0x4>

08004346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004346:	b480      	push	{r7}
 8004348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <BusFault_Handler+0x4>

0800434e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004352:	bf00      	nop
 8004354:	e7fd      	b.n	8004352 <UsageFault_Handler+0x4>

08004356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800435a:	bf00      	nop
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004384:	f7fc f904 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}

0800438c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004390:	4802      	ldr	r0, [pc, #8]	@ (800439c <USART2_IRQHandler+0x10>)
 8004392:	f7fe f86f 	bl	8002474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200004dc 	.word	0x200004dc

080043a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a4:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <SystemInit+0x28>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <SystemInit+0x28>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043b4:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <SystemInit+0x28>)
 80043b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80043ba:	609a      	str	r2, [r3, #8]
#endif
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e0:	463b      	mov	r3, r7
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80043e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004464 <MX_TIM2_Init+0x98>)
 80043ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80043ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80043f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004464 <MX_TIM2_Init+0x98>)
 80043f2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80043f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004464 <MX_TIM2_Init+0x98>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80043fe:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004400:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004404:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004406:	4b17      	ldr	r3, [pc, #92]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440c:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <MX_TIM2_Init+0x98>)
 800440e:	2200      	movs	r2, #0
 8004410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004412:	4814      	ldr	r0, [pc, #80]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004414:	f7fd fc7a 	bl	8001d0c <HAL_TIM_Base_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800441e:	f7ff fcc3 	bl	8003da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004428:	f107 0308 	add.w	r3, r7, #8
 800442c:	4619      	mov	r1, r3
 800442e:	480d      	ldr	r0, [pc, #52]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004430:	f7fd fc97 	bl	8001d62 <HAL_TIM_ConfigClockSource>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800443a:	f7ff fcb5 	bl	8003da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004442:	2300      	movs	r3, #0
 8004444:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004446:	463b      	mov	r3, r7
 8004448:	4619      	mov	r1, r3
 800444a:	4806      	ldr	r0, [pc, #24]	@ (8004464 <MX_TIM2_Init+0x98>)
 800444c:	f7fd fe68 	bl	8002120 <HAL_TIMEx_MasterConfigSynchronization>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004456:	f7ff fca7 	bl	8003da8 <Error_Handler>
  }

}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	2000049c 	.word	0x2000049c

08004468 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004478:	d10d      	bne.n	8004496 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <HAL_TIM_Base_MspInit+0x3c>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	4a08      	ldr	r2, [pc, #32]	@ (80044a4 <HAL_TIM_Base_MspInit+0x3c>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6413      	str	r3, [r2, #64]	@ 0x40
 800448a:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <HAL_TIM_Base_MspInit+0x3c>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800

080044a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80044ac:	4b11      	ldr	r3, [pc, #68]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044ae:	4a12      	ldr	r2, [pc, #72]	@ (80044f8 <MX_USART2_UART_Init+0x50>)
 80044b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80044b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80044ba:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044ce:	220c      	movs	r2, #12
 80044d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044d2:	4b08      	ldr	r3, [pc, #32]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044da:	2200      	movs	r2, #0
 80044dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80044de:	4805      	ldr	r0, [pc, #20]	@ (80044f4 <MX_USART2_UART_Init+0x4c>)
 80044e0:	f7fd fe8c 	bl	80021fc <HAL_UART_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80044ea:	f7ff fc5d 	bl	8003da8 <Error_Handler>
  }

}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200004dc 	.word	0x200004dc
 80044f8:	40004400 	.word	0x40004400

080044fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	@ 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <HAL_UART_MspInit+0x94>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d133      	bne.n	8004586 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	4b1c      	ldr	r3, [pc, #112]	@ (8004594 <HAL_UART_MspInit+0x98>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	4a1b      	ldr	r2, [pc, #108]	@ (8004594 <HAL_UART_MspInit+0x98>)
 8004528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452c:	6413      	str	r3, [r2, #64]	@ 0x40
 800452e:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <HAL_UART_MspInit+0x98>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <HAL_UART_MspInit+0x98>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <HAL_UART_MspInit+0x98>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6313      	str	r3, [r2, #48]	@ 0x30
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <HAL_UART_MspInit+0x98>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004556:	230c      	movs	r3, #12
 8004558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004562:	2303      	movs	r3, #3
 8004564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004566:	2307      	movs	r3, #7
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	4619      	mov	r1, r3
 8004570:	4809      	ldr	r0, [pc, #36]	@ (8004598 <HAL_UART_MspInit+0x9c>)
 8004572:	f7fc f985 	bl	8000880 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	2026      	movs	r0, #38	@ 0x26
 800457c:	f7fc f927 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004580:	2026      	movs	r0, #38	@ 0x26
 8004582:	f7fc f940 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004586:	bf00      	nop
 8004588:	3728      	adds	r7, #40	@ 0x28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40004400 	.word	0x40004400
 8004594:	40023800 	.word	0x40023800
 8004598:	40020000 	.word	0x40020000

0800459c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800459c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045a2:	e003      	b.n	80045ac <LoopCopyDataInit>

080045a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045aa:	3104      	adds	r1, #4

080045ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045ac:	480b      	ldr	r0, [pc, #44]	@ (80045dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045ae:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045b4:	d3f6      	bcc.n	80045a4 <CopyDataInit>
  ldr  r2, =_sbss
 80045b6:	4a0b      	ldr	r2, [pc, #44]	@ (80045e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045b8:	e002      	b.n	80045c0 <LoopFillZerobss>

080045ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045bc:	f842 3b04 	str.w	r3, [r2], #4

080045c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045c0:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045c4:	d3f9      	bcc.n	80045ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045c6:	f7ff feeb 	bl	80043a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ca:	f000 f819 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ce:	f7ff fb3d 	bl	8003c4c <main>
  bx  lr    
 80045d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80045d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80045d8:	08006b1c 	.word	0x08006b1c
  ldr  r0, =_sdata
 80045dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80045e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80045e8:	2000051c 	.word	0x2000051c

080045ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045ec:	e7fe      	b.n	80045ec <ADC_IRQHandler>

080045ee <memset>:
 80045ee:	4402      	add	r2, r0
 80045f0:	4603      	mov	r3, r0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d100      	bne.n	80045f8 <memset+0xa>
 80045f6:	4770      	bx	lr
 80045f8:	f803 1b01 	strb.w	r1, [r3], #1
 80045fc:	e7f9      	b.n	80045f2 <memset+0x4>
	...

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	@ (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	@ (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	@ (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	@ (8004644 <__libc_init_array+0x44>)
 8004614:	f000 f818 	bl	8004648 <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08006b14 	.word	0x08006b14
 800463c:	08006b14 	.word	0x08006b14
 8004640:	08006b14 	.word	0x08006b14
 8004644:	08006b18 	.word	0x08006b18

08004648 <_init>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr

08004654 <_fini>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	bf00      	nop
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr
